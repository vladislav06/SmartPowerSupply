
SmartPowerSupply.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004904  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004aa4  08004aa4  00014aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b38  08004b38  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ba0  20000060  08004ba0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c00  08004ba0  00024c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014358  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000304a  00000000  00000000  0003442b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00037478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ded  00000000  00000000  00038698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003094  00000000  00000000  00039485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012499  00000000  00000000  0003c519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097361  00000000  00000000  0004e9b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004dec  00000000  00000000  000e5d14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000eab00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004a8c 	.word	0x08004a8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004a8c 	.word	0x08004a8c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fa80 	bl	80009e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f824 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f880 	bl	80005ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004ec:	f001 fc6a 	bl	8001dc4 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <main+0x3c>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x40>)
 80004f6:	f001 fcaf 	bl	8001e58 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a08      	ldr	r2, [pc, #32]	; (8000520 <main+0x44>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of draw */
  renderHandle = osThreadNew(renderer, NULL, &render_attributes);
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x48>)
 8000502:	2100      	movs	r1, #0
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x4c>)
 8000506:	f001 fca7 	bl	8001e58 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <main+0x50>)
 800050e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000510:	f001 fc7c 	bl	8001e0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000514:	e7fe      	b.n	8000514 <main+0x38>
 8000516:	bf00      	nop
 8000518:	08004ad0 	.word	0x08004ad0
 800051c:	08000675 	.word	0x08000675
 8000520:	2000007c 	.word	0x2000007c
 8000524:	08004af4 	.word	0x08004af4
 8000528:	080006ad 	.word	0x080006ad
 800052c:	20000080 	.word	0x20000080

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f9c8 	bl	80048d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xb4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xb4>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <SystemClock_Config+0xb8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xb8>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fce1 	bl	8000f68 <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005ac:	f000 f898 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ff44 	bl	8001458 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d6:	f000 f883 	bl	80006e0 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b088      	sub	sp, #32
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	f107 030c 	add.w	r3, r7, #12
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <MX_GPIO_Init+0x80>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a18      	ldr	r2, [pc, #96]	; (800066c <MX_GPIO_Init+0x80>)
 800060c:	f043 0304 	orr.w	r3, r3, #4
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b16      	ldr	r3, [pc, #88]	; (800066c <MX_GPIO_Init+0x80>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0304 	and.w	r3, r3, #4
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_GPIO_Init+0x80>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a11      	ldr	r2, [pc, #68]	; (800066c <MX_GPIO_Init+0x80>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_GPIO_Init+0x80>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000640:	480b      	ldr	r0, [pc, #44]	; (8000670 <MX_GPIO_Init+0x84>)
 8000642:	f000 fc77 	bl	8000f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000646:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064c:	2301      	movs	r3, #1
 800064e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	4619      	mov	r1, r3
 800065e:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_GPIO_Init+0x84>)
 8000660:	f000 fae4 	bl	8000c2c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40023800 	.word	0x40023800
 8000670:	40020800 	.word	0x40020800

08000674 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <StartDefaultTask+0x34>)
 8000684:	f000 fc56 	bl	8000f34 <HAL_GPIO_WritePin>
        osDelay(600);
 8000688:	f44f 7016 	mov.w	r0, #600	; 0x258
 800068c:	f001 fc76 	bl	8001f7c <osDelay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	4804      	ldr	r0, [pc, #16]	; (80006a8 <StartDefaultTask+0x34>)
 8000698:	f000 fc4c 	bl	8000f34 <HAL_GPIO_WritePin>
        osDelay(600);
 800069c:	f44f 7016 	mov.w	r0, #600	; 0x258
 80006a0:	f001 fc6c 	bl	8001f7c <osDelay>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80006a4:	e7ea      	b.n	800067c <StartDefaultTask+0x8>
 80006a6:	bf00      	nop
 80006a8:	40020800 	.word	0x40020800

080006ac <renderer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_renderer */
void renderer(void *argument)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN renderer */
    /* Infinite loop */
    for (;;) {
        osDelay(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f001 fc61 	bl	8001f7c <osDelay>
 80006ba:	e7fb      	b.n	80006b4 <renderer+0x8>

080006bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	d101      	bne.n	80006d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ce:	f000 f9ab 	bl	8000a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40014800 	.word	0x40014800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80006e8:	e7fe      	b.n	80006e8 <Error_Handler+0x8>
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_MspInit+0x54>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	4a11      	ldr	r2, [pc, #68]	; (8000740 <HAL_MspInit+0x54>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000700:	6453      	str	r3, [r2, #68]	; 0x44
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x54>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <HAL_MspInit+0x54>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <HAL_MspInit+0x54>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	; 0x40
 800071e:	4b08      	ldr	r3, [pc, #32]	; (8000740 <HAL_MspInit+0x54>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt start*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800072a:	2200      	movs	r2, #0
 800072c:	210f      	movs	r1, #15
 800072e:	f06f 0001 	mvn.w	r0, #1
 8000732:	f000 fa51 	bl	8000bd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b2e      	ldr	r3, [pc, #184]	; (8000814 <HAL_InitTick+0xd0>)
 800075a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075c:	4a2d      	ldr	r2, [pc, #180]	; (8000814 <HAL_InitTick+0xd0>)
 800075e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000762:	6453      	str	r3, [r2, #68]	; 0x44
 8000764:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <HAL_InitTick+0xd0>)
 8000766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000770:	f107 020c 	add.w	r2, r7, #12
 8000774:	f107 0310 	add.w	r3, r7, #16
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 f838 	bl	80017f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000780:	f001 f822 	bl	80017c8 <HAL_RCC_GetPCLK2Freq>
 8000784:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000788:	4a23      	ldr	r2, [pc, #140]	; (8000818 <HAL_InitTick+0xd4>)
 800078a:	fba2 2303 	umull	r2, r3, r2, r3
 800078e:	0c9b      	lsrs	r3, r3, #18
 8000790:	3b01      	subs	r3, #1
 8000792:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000794:	4b21      	ldr	r3, [pc, #132]	; (800081c <HAL_InitTick+0xd8>)
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <HAL_InitTick+0xdc>)
 8000798:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 800079a:	4b20      	ldr	r3, [pc, #128]	; (800081c <HAL_InitTick+0xd8>)
 800079c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007a0:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <HAL_InitTick+0xd8>)
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 80007a8:	4b1c      	ldr	r3, [pc, #112]	; (800081c <HAL_InitTick+0xd8>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_InitTick+0xd8>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <HAL_InitTick+0xd8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 80007ba:	4818      	ldr	r0, [pc, #96]	; (800081c <HAL_InitTick+0xd8>)
 80007bc:	f001 f84a 	bl	8001854 <HAL_TIM_Base_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d11b      	bne.n	8000806 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 80007ce:	4813      	ldr	r0, [pc, #76]	; (800081c <HAL_InitTick+0xd8>)
 80007d0:	f001 f89a 	bl	8001908 <HAL_TIM_Base_Start_IT>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d111      	bne.n	8000806 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80007e2:	201a      	movs	r0, #26
 80007e4:	f000 fa14 	bl	8000c10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2b0f      	cmp	r3, #15
 80007ec:	d808      	bhi.n	8000800 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 80007ee:	2200      	movs	r2, #0
 80007f0:	6879      	ldr	r1, [r7, #4]
 80007f2:	201a      	movs	r0, #26
 80007f4:	f000 f9f0 	bl	8000bd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_InitTick+0xe0>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
 80007fe:	e002      	b.n	8000806 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000800:	2301      	movs	r3, #1
 8000802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800080a:	4618      	mov	r0, r3
 800080c:	3730      	adds	r7, #48	; 0x30
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800
 8000818:	431bde83 	.word	0x431bde83
 800081c:	20000084 	.word	0x20000084
 8000820:	40014800 	.word	0x40014800
 8000824:	20000004 	.word	0x20000004

08000828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800082c:	e7fe      	b.n	800082c <NMI_Handler+0x4>

0800082e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <HardFault_Handler+0x4>

08000834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <MemManage_Handler+0x4>

0800083a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <BusFault_Handler+0x4>

08000840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler+0x4>

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000858:	4802      	ldr	r0, [pc, #8]	; (8000864 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800085a:	f001 f8b7 	bl	80019cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000084 	.word	0x20000084

08000868 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <SystemInit+0x20>)
 800086e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000872:	4a05      	ldr	r2, [pc, #20]	; (8000888 <SystemInit+0x20>)
 8000874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000878:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800088c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000890:	f7ff ffea 	bl	8000868 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ba:	f004 f869 	bl	8004990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008be:	f7ff fe0d 	bl	80004dc <main>
  bx  lr    
 80008c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80008d0:	08004b40 	.word	0x08004b40
  ldr r2, =_sbss
 80008d4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80008d8:	20004c00 	.word	0x20004c00

080008dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC_IRQHandler>

080008de <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b084      	sub	sp, #16
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d104      	bne.n	80008f6 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80008ec:	b672      	cpsid	i
}
 80008ee:	bf00      	nop
 80008f0:	f7ff fef6 	bl	80006e0 <Error_Handler>
 80008f4:	e7fe      	b.n	80008f4 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	7a1b      	ldrb	r3, [r3, #8]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d904      	bls.n	8000908 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80008fe:	b672      	cpsid	i
}
 8000900:	bf00      	nop
 8000902:	f7ff feed 	bl	80006e0 <Error_Handler>
 8000906:	e7fe      	b.n	8000906 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a1b      	ldrb	r3, [r3, #8]
 800090c:	1c5a      	adds	r2, r3, #1
 800090e:	b2d1      	uxtb	r1, r2
 8000910:	687a      	ldr	r2, [r7, #4]
 8000912:	7211      	strb	r1, [r2, #8]
 8000914:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8000916:	f3ef 8211 	mrs	r2, BASEPRI
 800091a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fa      	str	r2, [r7, #12]
 800092c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b084      	sub	sp, #16
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d104      	bne.n	8000956 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
 8000950:	f7ff fec6 	bl	80006e0 <Error_Handler>
 8000954:	e7fe      	b.n	8000954 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7a1b      	ldrb	r3, [r3, #8]
 800095a:	3b01      	subs	r3, #1
 800095c:	b2da      	uxtb	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	7a1b      	ldrb	r3, [r3, #8]
 8000966:	2b01      	cmp	r3, #1
 8000968:	d904      	bls.n	8000974 <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 800096a:	b672      	cpsid	i
}
 800096c:	bf00      	nop
 800096e:	f7ff feb7 	bl	80006e0 <Error_Handler>
 8000972:	e7fe      	b.n	8000972 <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	7a1b      	ldrb	r3, [r3, #8]
 8000978:	461a      	mov	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000980:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000988:	bf00      	nop
}
 800098a:	bf00      	nop
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d104      	bne.n	80009aa <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
 80009a4:	f7ff fe9c 	bl	80006e0 <Error_Handler>
 80009a8:	e7fe      	b.n	80009a8 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff ff96 	bl	80008de <stm32_lock_acquire>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b082      	sub	sp, #8
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d104      	bne.n	80009d2 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
 80009cc:	f7ff fe88 	bl	80006e0 <Error_Handler>
 80009d0:	e7fe      	b.n	80009d0 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ffb2 	bl	800093e <stm32_lock_release>
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009e8:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <HAL_Init+0x40>)
 80009ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009f4:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <HAL_Init+0x40>)
 80009fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_Init+0x40>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a07      	ldr	r2, [pc, #28]	; (8000a24 <HAL_Init+0x40>)
 8000a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0c:	2003      	movs	r0, #3
 8000a0e:	f000 f8d8 	bl	8000bc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a12:	200f      	movs	r0, #15
 8000a14:	f7ff fe96 	bl	8000744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a18:	f7ff fe68 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023c00 	.word	0x40023c00

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000008 	.word	0x20000008
 8000a4c:	200000d8 	.word	0x200000d8

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000d8 	.word	0x200000d8

08000a68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a84:	4013      	ands	r3, r2
 8000a86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9a:	4a04      	ldr	r2, [pc, #16]	; (8000aac <__NVIC_SetPriorityGrouping+0x44>)
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	60d3      	str	r3, [r2, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	f003 0307 	and.w	r3, r3, #7
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db0b      	blt.n	8000af6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	f003 021f 	and.w	r2, r3, #31
 8000ae4:	4907      	ldr	r1, [pc, #28]	; (8000b04 <__NVIC_EnableIRQ+0x38>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	2001      	movs	r0, #1
 8000aee:	fa00 f202 	lsl.w	r2, r0, r2
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000e100 	.word	0xe000e100

08000b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	db0a      	blt.n	8000b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	490c      	ldr	r1, [pc, #48]	; (8000b54 <__NVIC_SetPriority+0x4c>)
 8000b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b26:	0112      	lsls	r2, r2, #4
 8000b28:	b2d2      	uxtb	r2, r2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b30:	e00a      	b.n	8000b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4908      	ldr	r1, [pc, #32]	; (8000b58 <__NVIC_SetPriority+0x50>)
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	f003 030f 	and.w	r3, r3, #15
 8000b3e:	3b04      	subs	r3, #4
 8000b40:	0112      	lsls	r2, r2, #4
 8000b42:	b2d2      	uxtb	r2, r2
 8000b44:	440b      	add	r3, r1
 8000b46:	761a      	strb	r2, [r3, #24]
}
 8000b48:	bf00      	nop
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	e000e100 	.word	0xe000e100
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b089      	sub	sp, #36	; 0x24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f003 0307 	and.w	r3, r3, #7
 8000b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b70:	69fb      	ldr	r3, [r7, #28]
 8000b72:	f1c3 0307 	rsb	r3, r3, #7
 8000b76:	2b04      	cmp	r3, #4
 8000b78:	bf28      	it	cs
 8000b7a:	2304      	movcs	r3, #4
 8000b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3304      	adds	r3, #4
 8000b82:	2b06      	cmp	r3, #6
 8000b84:	d902      	bls.n	8000b8c <NVIC_EncodePriority+0x30>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3b03      	subs	r3, #3
 8000b8a:	e000      	b.n	8000b8e <NVIC_EncodePriority+0x32>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43da      	mvns	r2, r3
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	401a      	ands	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	fa01 f303 	lsl.w	r3, r1, r3
 8000bae:	43d9      	mvns	r1, r3
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	4313      	orrs	r3, r2
         );
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3724      	adds	r7, #36	; 0x24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff4c 	bl	8000a68 <__NVIC_SetPriorityGrouping>
}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
 8000be4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bea:	f7ff ff61 	bl	8000ab0 <__NVIC_GetPriorityGrouping>
 8000bee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	68b9      	ldr	r1, [r7, #8]
 8000bf4:	6978      	ldr	r0, [r7, #20]
 8000bf6:	f7ff ffb1 	bl	8000b5c <NVIC_EncodePriority>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c00:	4611      	mov	r1, r2
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff80 	bl	8000b08 <__NVIC_SetPriority>
}
 8000c08:	bf00      	nop
 8000c0a:	3718      	adds	r7, #24
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff54 	bl	8000acc <__NVIC_EnableIRQ>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
 8000c46:	e159      	b.n	8000efc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c48:	2201      	movs	r2, #1
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	697a      	ldr	r2, [r7, #20]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f040 8148 	bne.w	8000ef6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d005      	beq.n	8000c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d130      	bne.n	8000ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4013      	ands	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	f003 0201 	and.w	r2, r3, #1
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	d017      	beq.n	8000d1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	2203      	movs	r2, #3
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	43db      	mvns	r3, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4013      	ands	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0303 	and.w	r3, r3, #3
 8000d24:	2b02      	cmp	r3, #2
 8000d26:	d123      	bne.n	8000d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	08da      	lsrs	r2, r3, #3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3208      	adds	r2, #8
 8000d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	f003 0307 	and.w	r3, r3, #7
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	691a      	ldr	r2, [r3, #16]
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0307 	and.w	r3, r3, #7
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	08da      	lsrs	r2, r3, #3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3208      	adds	r2, #8
 8000d6a:	69b9      	ldr	r1, [r7, #24]
 8000d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4013      	ands	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0203 	and.w	r2, r3, #3
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	f000 80a2 	beq.w	8000ef6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	4b57      	ldr	r3, [pc, #348]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	4a56      	ldr	r2, [pc, #344]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8000dc2:	4b54      	ldr	r3, [pc, #336]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dce:	4a52      	ldr	r2, [pc, #328]	; (8000f18 <HAL_GPIO_Init+0x2ec>)
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	089b      	lsrs	r3, r3, #2
 8000dd4:	3302      	adds	r3, #2
 8000dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	220f      	movs	r2, #15
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x202>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a48      	ldr	r2, [pc, #288]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x1fe>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a47      	ldr	r2, [pc, #284]	; (8000f24 <HAL_GPIO_Init+0x2f8>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x1fa>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a46      	ldr	r2, [pc, #280]	; (8000f28 <HAL_GPIO_Init+0x2fc>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x1f6>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a45      	ldr	r2, [pc, #276]	; (8000f2c <HAL_GPIO_Init+0x300>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x1f2>
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	e008      	b.n	8000e30 <HAL_GPIO_Init+0x204>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e006      	b.n	8000e30 <HAL_GPIO_Init+0x204>
 8000e22:	2303      	movs	r3, #3
 8000e24:	e004      	b.n	8000e30 <HAL_GPIO_Init+0x204>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e002      	b.n	8000e30 <HAL_GPIO_Init+0x204>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <HAL_GPIO_Init+0x204>
 8000e2e:	2300      	movs	r3, #0
 8000e30:	69fa      	ldr	r2, [r7, #28]
 8000e32:	f002 0203 	and.w	r2, r2, #3
 8000e36:	0092      	lsls	r2, r2, #2
 8000e38:	4093      	lsls	r3, r2
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e40:	4935      	ldr	r1, [pc, #212]	; (8000f18 <HAL_GPIO_Init+0x2ec>)
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	089b      	lsrs	r3, r3, #2
 8000e46:	3302      	adds	r3, #2
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4e:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e72:	4a2f      	ldr	r2, [pc, #188]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000e74:	69bb      	ldr	r3, [r7, #24]
 8000e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e9c:	4a24      	ldr	r2, [pc, #144]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_GPIO_Init+0x304>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	61fb      	str	r3, [r7, #28]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2b0f      	cmp	r3, #15
 8000f00:	f67f aea2 	bls.w	8000c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40013800 	.word	0x40013800
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	40020400 	.word	0x40020400
 8000f24:	40020800 	.word	0x40020800
 8000f28:	40020c00 	.word	0x40020c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40013c00 	.word	0x40013c00

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	619a      	str	r2, [r3, #24]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e267      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d075      	beq.n	8001072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f86:	4b88      	ldr	r3, [pc, #544]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f003 030c 	and.w	r3, r3, #12
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	d00c      	beq.n	8000fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f92:	4b85      	ldr	r3, [pc, #532]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f9a:	2b08      	cmp	r3, #8
 8000f9c:	d112      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9e:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000faa:	d10b      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fac:	4b7e      	ldr	r3, [pc, #504]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d05b      	beq.n	8001070 <HAL_RCC_OscConfig+0x108>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d157      	bne.n	8001070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e242      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fcc:	d106      	bne.n	8000fdc <HAL_RCC_OscConfig+0x74>
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	e01d      	b.n	8001018 <HAL_RCC_OscConfig+0xb0>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe4:	d10c      	bne.n	8001000 <HAL_RCC_OscConfig+0x98>
 8000fe6:	4b70      	ldr	r3, [pc, #448]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a6f      	ldr	r2, [pc, #444]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	4b6d      	ldr	r3, [pc, #436]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a6c      	ldr	r2, [pc, #432]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8000ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ffc:	6013      	str	r3, [r2, #0]
 8000ffe:	e00b      	b.n	8001018 <HAL_RCC_OscConfig+0xb0>
 8001000:	4b69      	ldr	r3, [pc, #420]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a68      	ldr	r2, [pc, #416]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b66      	ldr	r3, [pc, #408]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a65      	ldr	r2, [pc, #404]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d013      	beq.n	8001048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fd16 	bl	8000a50 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fd12 	bl	8000a50 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e207      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	4b5b      	ldr	r3, [pc, #364]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0f0      	beq.n	8001028 <HAL_RCC_OscConfig+0xc0>
 8001046:	e014      	b.n	8001072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fd02 	bl	8000a50 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fcfe 	bl	8000a50 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e1f3      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	4b51      	ldr	r3, [pc, #324]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d1f0      	bne.n	8001050 <HAL_RCC_OscConfig+0xe8>
 800106e:	e000      	b.n	8001072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d063      	beq.n	8001146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800107e:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	f003 030c 	and.w	r3, r3, #12
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800108a:	4b47      	ldr	r3, [pc, #284]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001092:	2b08      	cmp	r3, #8
 8001094:	d11c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001096:	4b44      	ldr	r3, [pc, #272]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d116      	bne.n	80010d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d005      	beq.n	80010ba <HAL_RCC_OscConfig+0x152>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e1c7      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ba:	4b3b      	ldr	r3, [pc, #236]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	691b      	ldr	r3, [r3, #16]
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	4937      	ldr	r1, [pc, #220]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010ca:	4313      	orrs	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	e03a      	b.n	8001146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d8:	4b34      	ldr	r3, [pc, #208]	; (80011ac <HAL_RCC_OscConfig+0x244>)
 80010da:	2201      	movs	r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010de:	f7ff fcb7 	bl	8000a50 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e6:	f7ff fcb3 	bl	8000a50 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1a8      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001104:	4b28      	ldr	r3, [pc, #160]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	4925      	ldr	r1, [pc, #148]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	e015      	b.n	8001146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x244>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001120:	f7ff fc96 	bl	8000a50 <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fc92 	bl	8000a50 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e187      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f0      	bne.n	8001128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	2b00      	cmp	r3, #0
 8001150:	d036      	beq.n	80011c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d016      	beq.n	8001188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_RCC_OscConfig+0x248>)
 800115c:	2201      	movs	r2, #1
 800115e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001160:	f7ff fc76 	bl	8000a50 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001168:	f7ff fc72 	bl	8000a50 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e167      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RCC_OscConfig+0x240>)
 800117c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x200>
 8001186:	e01b      	b.n	80011c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_RCC_OscConfig+0x248>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118e:	f7ff fc5f 	bl	8000a50 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001194:	e00e      	b.n	80011b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001196:	f7ff fc5b 	bl	8000a50 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d907      	bls.n	80011b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e150      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
 80011a8:	40023800 	.word	0x40023800
 80011ac:	42470000 	.word	0x42470000
 80011b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b88      	ldr	r3, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ea      	bne.n	8001196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 8097 	beq.w	80012fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b81      	ldr	r3, [pc, #516]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10f      	bne.n	80011fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	4b7d      	ldr	r3, [pc, #500]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a7c      	ldr	r2, [pc, #496]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b7a      	ldr	r3, [pc, #488]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011fa:	2301      	movs	r3, #1
 80011fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fe:	4b77      	ldr	r3, [pc, #476]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001206:	2b00      	cmp	r3, #0
 8001208:	d118      	bne.n	800123c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800120a:	4b74      	ldr	r3, [pc, #464]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a73      	ldr	r2, [pc, #460]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 8001210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001216:	f7ff fc1b 	bl	8000a50 <HAL_GetTick>
 800121a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121e:	f7ff fc17 	bl	8000a50 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e10c      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	4b6a      	ldr	r3, [pc, #424]	; (80013dc <HAL_RCC_OscConfig+0x474>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f0      	beq.n	800121e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d106      	bne.n	8001252 <HAL_RCC_OscConfig+0x2ea>
 8001244:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001248:	4a63      	ldr	r2, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	6713      	str	r3, [r2, #112]	; 0x70
 8001250:	e01c      	b.n	800128c <HAL_RCC_OscConfig+0x324>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b05      	cmp	r3, #5
 8001258:	d10c      	bne.n	8001274 <HAL_RCC_OscConfig+0x30c>
 800125a:	4b5f      	ldr	r3, [pc, #380]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800125c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125e:	4a5e      	ldr	r2, [pc, #376]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6713      	str	r3, [r2, #112]	; 0x70
 8001266:	4b5c      	ldr	r3, [pc, #368]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800126a:	4a5b      	ldr	r2, [pc, #364]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6713      	str	r3, [r2, #112]	; 0x70
 8001272:	e00b      	b.n	800128c <HAL_RCC_OscConfig+0x324>
 8001274:	4b58      	ldr	r3, [pc, #352]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	4a57      	ldr	r2, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800127a:	f023 0301 	bic.w	r3, r3, #1
 800127e:	6713      	str	r3, [r2, #112]	; 0x70
 8001280:	4b55      	ldr	r3, [pc, #340]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001284:	4a54      	ldr	r2, [pc, #336]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d015      	beq.n	80012c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001294:	f7ff fbdc 	bl	8000a50 <HAL_GetTick>
 8001298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129a:	e00a      	b.n	80012b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800129c:	f7ff fbd8 	bl	8000a50 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e0cb      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b2:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0ee      	beq.n	800129c <HAL_RCC_OscConfig+0x334>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fbc6 	bl	8000a50 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c6:	e00a      	b.n	80012de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c8:	f7ff fbc2 	bl	8000a50 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0b5      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012de:	4b3e      	ldr	r3, [pc, #248]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1ee      	bne.n	80012c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d105      	bne.n	80012fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f0:	4b39      	ldr	r3, [pc, #228]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	4a38      	ldr	r2, [pc, #224]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80a1 	beq.w	8001448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001306:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b08      	cmp	r3, #8
 8001310:	d05c      	beq.n	80013cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d141      	bne.n	800139e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800131a:	4b31      	ldr	r3, [pc, #196]	; (80013e0 <HAL_RCC_OscConfig+0x478>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fb96 	bl	8000a50 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001328:	f7ff fb92 	bl	8000a50 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e087      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	4b27      	ldr	r3, [pc, #156]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69da      	ldr	r2, [r3, #28]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001354:	019b      	lsls	r3, r3, #6
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	085b      	lsrs	r3, r3, #1
 800135e:	3b01      	subs	r3, #1
 8001360:	041b      	lsls	r3, r3, #16
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	061b      	lsls	r3, r3, #24
 800136a:	491b      	ldr	r1, [pc, #108]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <HAL_RCC_OscConfig+0x478>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fb6b 	bl	8000a50 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137e:	f7ff fb67 	bl	8000a50 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e05c      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x416>
 800139c:	e054      	b.n	8001448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_OscConfig+0x478>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb54 	bl	8000a50 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fb50 	bl	8000a50 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e045      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_RCC_OscConfig+0x470>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x444>
 80013ca:	e03d      	b.n	8001448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e038      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000
 80013e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_RCC_OscConfig+0x4ec>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d028      	beq.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d121      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d11a      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800140e:	68fa      	ldr	r2, [r7, #12]
 8001410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001414:	4013      	ands	r3, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800141a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800141c:	4293      	cmp	r3, r2
 800141e:	d111      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	085b      	lsrs	r3, r3, #1
 800142c:	3b01      	subs	r3, #1
 800142e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001430:	429a      	cmp	r2, r3
 8001432:	d107      	bne.n	8001444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001440:	429a      	cmp	r2, r3
 8001442:	d001      	beq.n	8001448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0cc      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800146c:	4b68      	ldr	r3, [pc, #416]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	429a      	cmp	r2, r3
 8001478:	d90c      	bls.n	8001494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800147a:	4b65      	ldr	r3, [pc, #404]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001482:	4b63      	ldr	r3, [pc, #396]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	429a      	cmp	r2, r3
 800148e:	d001      	beq.n	8001494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0b8      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d020      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014ac:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a58      	ldr	r2, [pc, #352]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	4a52      	ldr	r2, [pc, #328]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	494d      	ldr	r1, [pc, #308]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	4313      	orrs	r3, r2
 80014e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d044      	beq.n	8001578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d107      	bne.n	8001506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f6:	4b47      	ldr	r3, [pc, #284]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d119      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e07f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b02      	cmp	r3, #2
 800150c:	d003      	beq.n	8001516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001512:	2b03      	cmp	r3, #3
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001516:	4b3f      	ldr	r3, [pc, #252]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e067      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001536:	4b37      	ldr	r3, [pc, #220]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f023 0203 	bic.w	r2, r3, #3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	4934      	ldr	r1, [pc, #208]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001548:	f7ff fa82 	bl	8000a50 <HAL_GetTick>
 800154c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	e00a      	b.n	8001566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff fa7e 	bl	8000a50 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e04f      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 020c 	and.w	r2, r3, #12
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d1eb      	bne.n	8001550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001578:	4b25      	ldr	r3, [pc, #148]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d20c      	bcs.n	80015a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_RCC_ClockConfig+0x1b8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	683a      	ldr	r2, [r7, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d001      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e032      	b.n	8001606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d008      	beq.n	80015be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4916      	ldr	r1, [pc, #88]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	4313      	orrs	r3, r2
 80015bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0308 	and.w	r3, r3, #8
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d009      	beq.n	80015de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	490e      	ldr	r1, [pc, #56]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015de:	f000 f821 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	490a      	ldr	r1, [pc, #40]	; (8001618 <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	fa22 f303 	lsr.w	r3, r2, r3
 80015f6:	4a09      	ldr	r2, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c4>)
 80015f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_ClockConfig+0x1c8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff f8a0 	bl	8000744 <HAL_InitTick>

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023c00 	.word	0x40023c00
 8001614:	40023800 	.word	0x40023800
 8001618:	08004b18 	.word	0x08004b18
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001628:	b090      	sub	sp, #64	; 0x40
 800162a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	; 0x34
 8001630:	2300      	movs	r3, #0
 8001632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800163c:	4b59      	ldr	r3, [pc, #356]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	2b08      	cmp	r3, #8
 8001646:	d00d      	beq.n	8001664 <HAL_RCC_GetSysClockFreq+0x40>
 8001648:	2b08      	cmp	r3, #8
 800164a:	f200 80a1 	bhi.w	8001790 <HAL_RCC_GetSysClockFreq+0x16c>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d002      	beq.n	8001658 <HAL_RCC_GetSysClockFreq+0x34>
 8001652:	2b04      	cmp	r3, #4
 8001654:	d003      	beq.n	800165e <HAL_RCC_GetSysClockFreq+0x3a>
 8001656:	e09b      	b.n	8001790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800165c:	e09b      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165e:	4b53      	ldr	r3, [pc, #332]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001662:	e098      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001664:	4b4f      	ldr	r3, [pc, #316]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800166c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166e:	4b4d      	ldr	r3, [pc, #308]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d028      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800167a:	4b4a      	ldr	r3, [pc, #296]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	099b      	lsrs	r3, r3, #6
 8001680:	2200      	movs	r2, #0
 8001682:	623b      	str	r3, [r7, #32]
 8001684:	627a      	str	r2, [r7, #36]	; 0x24
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800168c:	2100      	movs	r1, #0
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 8001690:	fb03 f201 	mul.w	r2, r3, r1
 8001694:	2300      	movs	r3, #0
 8001696:	fb00 f303 	mul.w	r3, r0, r3
 800169a:	4413      	add	r3, r2
 800169c:	4a43      	ldr	r2, [pc, #268]	; (80017ac <HAL_RCC_GetSysClockFreq+0x188>)
 800169e:	fba0 1202 	umull	r1, r2, r0, r2
 80016a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016a4:	460a      	mov	r2, r1
 80016a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80016a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016aa:	4413      	add	r3, r2
 80016ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	2200      	movs	r2, #0
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	61fa      	str	r2, [r7, #28]
 80016b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016be:	f7fe fd8f 	bl	80001e0 <__aeabi_uldivmod>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4613      	mov	r3, r2
 80016c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016ca:	e053      	b.n	8001774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016cc:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	2200      	movs	r2, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	617a      	str	r2, [r7, #20]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016de:	f04f 0b00 	mov.w	fp, #0
 80016e2:	4652      	mov	r2, sl
 80016e4:	465b      	mov	r3, fp
 80016e6:	f04f 0000 	mov.w	r0, #0
 80016ea:	f04f 0100 	mov.w	r1, #0
 80016ee:	0159      	lsls	r1, r3, #5
 80016f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016f4:	0150      	lsls	r0, r2, #5
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	ebb2 080a 	subs.w	r8, r2, sl
 80016fe:	eb63 090b 	sbc.w	r9, r3, fp
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800170e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001716:	ebb2 0408 	subs.w	r4, r2, r8
 800171a:	eb63 0509 	sbc.w	r5, r3, r9
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	00eb      	lsls	r3, r5, #3
 8001728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800172c:	00e2      	lsls	r2, r4, #3
 800172e:	4614      	mov	r4, r2
 8001730:	461d      	mov	r5, r3
 8001732:	eb14 030a 	adds.w	r3, r4, sl
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	eb45 030b 	adc.w	r3, r5, fp
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800174a:	4629      	mov	r1, r5
 800174c:	028b      	lsls	r3, r1, #10
 800174e:	4621      	mov	r1, r4
 8001750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001754:	4621      	mov	r1, r4
 8001756:	028a      	lsls	r2, r1, #10
 8001758:	4610      	mov	r0, r2
 800175a:	4619      	mov	r1, r3
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	2200      	movs	r2, #0
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	60fa      	str	r2, [r7, #12]
 8001764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001768:	f7fe fd3a 	bl	80001e0 <__aeabi_uldivmod>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4613      	mov	r3, r2
 8001772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	0c1b      	lsrs	r3, r3, #16
 800177a:	f003 0303 	and.w	r3, r3, #3
 800177e:	3301      	adds	r3, #1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001788:	fbb2 f3f3 	udiv	r3, r2, r3
 800178c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800178e:	e002      	b.n	8001796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001798:	4618      	mov	r0, r3
 800179a:	3740      	adds	r7, #64	; 0x40
 800179c:	46bd      	mov	sp, r7
 800179e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	00f42400 	.word	0x00f42400
 80017ac:	017d7840 	.word	0x017d7840

080017b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000000 	.word	0x20000000

080017c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017cc:	f7ff fff0 	bl	80017b0 <HAL_RCC_GetHCLKFreq>
 80017d0:	4602      	mov	r2, r0
 80017d2:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	0b5b      	lsrs	r3, r3, #13
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	4903      	ldr	r1, [pc, #12]	; (80017ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80017de:	5ccb      	ldrb	r3, [r1, r3]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	08004b28 	.word	0x08004b28

080017f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	220f      	movs	r2, #15
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_RCC_GetClockConfig+0x5c>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	08db      	lsrs	r3, r3, #3
 800182a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_RCC_GetClockConfig+0x60>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0207 	and.w	r2, r3, #7
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	601a      	str	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40023c00 	.word	0x40023c00

08001854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e041      	b.n	80018ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d106      	bne.n	8001880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f000 f839 	bl	80018f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f000 f9b2 	bl	8001bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2201      	movs	r2, #1
 80018cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d001      	beq.n	8001920 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e044      	b.n	80019aa <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <HAL_TIM_Base_Start_IT+0xb0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d018      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800194a:	d013      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <HAL_TIM_Base_Start_IT+0xb4>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00e      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_TIM_Base_Start_IT+0xb8>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d009      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a17      	ldr	r2, [pc, #92]	; (80019c4 <HAL_TIM_Base_Start_IT+0xbc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d004      	beq.n	8001974 <HAL_TIM_Base_Start_IT+0x6c>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a16      	ldr	r2, [pc, #88]	; (80019c8 <HAL_TIM_Base_Start_IT+0xc0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d111      	bne.n	8001998 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d010      	beq.n	80019a8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0201 	orr.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001996:	e007      	b.n	80019a8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40010000 	.word	0x40010000
 80019bc:	40000400 	.word	0x40000400
 80019c0:	40000800 	.word	0x40000800
 80019c4:	40000c00 	.word	0x40000c00
 80019c8:	40014000 	.word	0x40014000

080019cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d020      	beq.n	8001a30 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01b      	beq.n	8001a30 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f06f 0202 	mvn.w	r2, #2
 8001a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f000 f8d2 	bl	8001bc0 <HAL_TIM_IC_CaptureCallback>
 8001a1c:	e005      	b.n	8001a2a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f8c4 	bl	8001bac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f8d5 	bl	8001bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d020      	beq.n	8001a7c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0204 	mvn.w	r2, #4
 8001a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2202      	movs	r2, #2
 8001a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f8ac 	bl	8001bc0 <HAL_TIM_IC_CaptureCallback>
 8001a68:	e005      	b.n	8001a76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f89e 	bl	8001bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f8af 	bl	8001bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d020      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0308 	and.w	r3, r3, #8
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d01b      	beq.n	8001ac8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0208 	mvn.w	r2, #8
 8001a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2204      	movs	r2, #4
 8001a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f886 	bl	8001bc0 <HAL_TIM_IC_CaptureCallback>
 8001ab4:	e005      	b.n	8001ac2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f878 	bl	8001bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f889 	bl	8001bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0310 	and.w	r3, r3, #16
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d020      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d01b      	beq.n	8001b14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0210 	mvn.w	r2, #16
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2208      	movs	r2, #8
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f860 	bl	8001bc0 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f852 	bl	8001bac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f863 	bl	8001bd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00c      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d007      	beq.n	8001b38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f06f 0201 	mvn.w	r2, #1
 8001b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe fdc2 	bl	80006bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00c      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d007      	beq.n	8001b5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f8e6 	bl	8001d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00c      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 f834 	bl	8001be8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00c      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d007      	beq.n	8001ba4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0220 	mvn.w	r2, #32
 8001b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f8b8 	bl	8001d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a3a      	ldr	r2, [pc, #232]	; (8001cf8 <TIM_Base_SetConfig+0xfc>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00f      	beq.n	8001c34 <TIM_Base_SetConfig+0x38>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1a:	d00b      	beq.n	8001c34 <TIM_Base_SetConfig+0x38>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a37      	ldr	r2, [pc, #220]	; (8001cfc <TIM_Base_SetConfig+0x100>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <TIM_Base_SetConfig+0x38>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a36      	ldr	r2, [pc, #216]	; (8001d00 <TIM_Base_SetConfig+0x104>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d003      	beq.n	8001c34 <TIM_Base_SetConfig+0x38>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a35      	ldr	r2, [pc, #212]	; (8001d04 <TIM_Base_SetConfig+0x108>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d108      	bne.n	8001c46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a2b      	ldr	r2, [pc, #172]	; (8001cf8 <TIM_Base_SetConfig+0xfc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d01b      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c54:	d017      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a28      	ldr	r2, [pc, #160]	; (8001cfc <TIM_Base_SetConfig+0x100>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d013      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a27      	ldr	r2, [pc, #156]	; (8001d00 <TIM_Base_SetConfig+0x104>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00f      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a26      	ldr	r2, [pc, #152]	; (8001d04 <TIM_Base_SetConfig+0x108>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00b      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a25      	ldr	r2, [pc, #148]	; (8001d08 <TIM_Base_SetConfig+0x10c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a24      	ldr	r2, [pc, #144]	; (8001d0c <TIM_Base_SetConfig+0x110>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d003      	beq.n	8001c86 <TIM_Base_SetConfig+0x8a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a23      	ldr	r2, [pc, #140]	; (8001d10 <TIM_Base_SetConfig+0x114>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d108      	bne.n	8001c98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a0e      	ldr	r2, [pc, #56]	; (8001cf8 <TIM_Base_SetConfig+0xfc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d103      	bne.n	8001ccc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	691a      	ldr	r2, [r3, #16]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d105      	bne.n	8001cea <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	f023 0201 	bic.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	611a      	str	r2, [r3, #16]
  }
}
 8001cea:	bf00      	nop
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40010000 	.word	0x40010000
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	40000800 	.word	0x40000800
 8001d04:	40000c00 	.word	0x40000c00
 8001d08:	40014000 	.word	0x40014000
 8001d0c:	40014400 	.word	0x40014400
 8001d10:	40014800 	.word	0x40014800

08001d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <__NVIC_SetPriority>:
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	; (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	; (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Handler+0x1c>)
 8001d96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001d98:	f001 fd28 	bl	80037ec <xTaskGetSchedulerState>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001da2:	f002 fb11 	bl	80043c8 <xPortSysTickHandler>
  }
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001db4:	2100      	movs	r1, #0
 8001db6:	f06f 0004 	mvn.w	r0, #4
 8001dba:	f7ff ffbf 	bl	8001d3c <__NVIC_SetPriority>
#endif
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001dca:	f3ef 8305 	mrs	r3, IPSR
 8001dce:	603b      	str	r3, [r7, #0]
  return(result);
 8001dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001dd6:	f06f 0305 	mvn.w	r3, #5
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	e00c      	b.n	8001df8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001dde:	4b0a      	ldr	r3, [pc, #40]	; (8001e08 <osKernelInitialize+0x44>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d105      	bne.n	8001df2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <osKernelInitialize+0x44>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	e002      	b.n	8001df8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001df8:	687b      	ldr	r3, [r7, #4]
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	200000dc 	.word	0x200000dc

08001e0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e12:	f3ef 8305 	mrs	r3, IPSR
 8001e16:	603b      	str	r3, [r7, #0]
  return(result);
 8001e18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001e1e:	f06f 0305 	mvn.w	r3, #5
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	e010      	b.n	8001e48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <osKernelStart+0x48>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d109      	bne.n	8001e42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001e2e:	f7ff ffbf 	bl	8001db0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <osKernelStart+0x48>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001e38:	f001 f87c 	bl	8002f34 <vTaskStartScheduler>
      stat = osOK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	e002      	b.n	8001e48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200000dc 	.word	0x200000dc

08001e58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08e      	sub	sp, #56	; 0x38
 8001e5c:	af04      	add	r7, sp, #16
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e68:	f3ef 8305 	mrs	r3, IPSR
 8001e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8001e6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d17e      	bne.n	8001f72 <osThreadNew+0x11a>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d07b      	beq.n	8001f72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001e7a:	2380      	movs	r3, #128	; 0x80
 8001e7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001e7e:	2318      	movs	r3, #24
 8001e80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d045      	beq.n	8001f1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <osThreadNew+0x48>
        name = attr->name;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <osThreadNew+0x6e>
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b38      	cmp	r3, #56	; 0x38
 8001eb8:	d805      	bhi.n	8001ec6 <osThreadNew+0x6e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <osThreadNew+0x72>
        return (NULL);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e054      	b.n	8001f74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00e      	beq.n	8001f00 <osThreadNew+0xa8>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	2ba7      	cmp	r3, #167	; 0xa7
 8001ee8:	d90a      	bls.n	8001f00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <osThreadNew+0xa8>
        mem = 1;
 8001efa:	2301      	movs	r3, #1
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	e010      	b.n	8001f22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10c      	bne.n	8001f22 <osThreadNew+0xca>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d108      	bne.n	8001f22 <osThreadNew+0xca>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d104      	bne.n	8001f22 <osThreadNew+0xca>
          mem = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e001      	b.n	8001f22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d110      	bne.n	8001f4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001f30:	9202      	str	r2, [sp, #8]
 8001f32:	9301      	str	r3, [sp, #4]
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 fe0c 	bl	8002b5c <xTaskCreateStatic>
 8001f44:	4603      	mov	r3, r0
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	e013      	b.n	8001f72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d110      	bne.n	8001f72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f107 0310 	add.w	r3, r7, #16
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 fe57 	bl	8002c16 <xTaskCreate>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <osThreadNew+0x11a>
            hTask = NULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001f72:	693b      	ldr	r3, [r7, #16]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3728      	adds	r7, #40	; 0x28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f84:	f3ef 8305 	mrs	r3, IPSR
 8001f88:	60bb      	str	r3, [r7, #8]
  return(result);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <osDelay+0x1c>
    stat = osErrorISR;
 8001f90:	f06f 0305 	mvn.w	r3, #5
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e007      	b.n	8001fa8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 ff92 	bl	8002ecc <vTaskDelay>
    }
  }

  return (stat);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4a06      	ldr	r2, [pc, #24]	; (8001fe4 <vApplicationGetIdleTaskMemory+0x30>)
 8001fca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2280      	movs	r2, #128	; 0x80
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	bf00      	nop
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	200000e0 	.word	0x200000e0
 8001fe4:	20000188 	.word	0x20000188

08001fe8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <vApplicationGetTimerTaskMemory+0x2c>)
 8001ff8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4a06      	ldr	r2, [pc, #24]	; (8002018 <vApplicationGetTimerTaskMemory+0x30>)
 8001ffe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002006:	601a      	str	r2, [r3, #0]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	20000388 	.word	0x20000388
 8002018:	20000430 	.word	0x20000430

0800201c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f103 0208 	add.w	r2, r3, #8
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002034:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f103 0208 	add.w	r2, r3, #8
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f103 0208 	add.w	r2, r3, #8
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002076:	b480      	push	{r7}
 8002078:	b085      	sub	sp, #20
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
 800207e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68fa      	ldr	r2, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020d4:	d103      	bne.n	80020de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e00c      	b.n	80020f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3308      	adds	r3, #8
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	e002      	b.n	80020ec <vListInsert+0x2e>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d2f6      	bcs.n	80020e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	601a      	str	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6892      	ldr	r2, [r2, #8]
 8002146:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	6852      	ldr	r2, [r2, #4]
 8002150:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	429a      	cmp	r2, r3
 800215a:	d103      	bne.n	8002164 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10a      	bne.n	80021ae <xQueueGenericReset+0x2a>
	__asm volatile
 8002198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219c:	f383 8811 	msr	BASEPRI, r3
 80021a0:	f3bf 8f6f 	isb	sy
 80021a4:	f3bf 8f4f 	dsb	sy
 80021a8:	60bb      	str	r3, [r7, #8]
}
 80021aa:	bf00      	nop
 80021ac:	e7fe      	b.n	80021ac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80021ae:	f002 f879 	bl	80042a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	441a      	add	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	3b01      	subs	r3, #1
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80021e4:	fb01 f303 	mul.w	r3, r1, r3
 80021e8:	441a      	add	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	22ff      	movs	r2, #255	; 0xff
 80021f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	22ff      	movs	r2, #255	; 0xff
 80021fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d114      	bne.n	800222e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d01a      	beq.n	8002242 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3310      	adds	r3, #16
 8002210:	4618      	mov	r0, r3
 8002212:	f001 f929 	bl	8003468 <xTaskRemoveFromEventList>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d012      	beq.n	8002242 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <xQueueGenericReset+0xcc>)
 800221e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	f3bf 8f6f 	isb	sy
 800222c:	e009      	b.n	8002242 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	3310      	adds	r3, #16
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fef2 	bl	800201c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3324      	adds	r3, #36	; 0x24
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff feed 	bl	800201c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002242:	f002 f85f 	bl	8004304 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	e000ed04 	.word	0xe000ed04

08002254 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08e      	sub	sp, #56	; 0x38
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
 8002260:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d10a      	bne.n	800227e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800227a:	bf00      	nop
 800227c:	e7fe      	b.n	800227c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002288:	f383 8811 	msr	BASEPRI, r3
 800228c:	f3bf 8f6f 	isb	sy
 8002290:	f3bf 8f4f 	dsb	sy
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002296:	bf00      	nop
 8002298:	e7fe      	b.n	8002298 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d002      	beq.n	80022a6 <xQueueGenericCreateStatic+0x52>
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <xQueueGenericCreateStatic+0x56>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueGenericCreateStatic+0x58>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	623b      	str	r3, [r7, #32]
}
 80022c2:	bf00      	nop
 80022c4:	e7fe      	b.n	80022c4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d102      	bne.n	80022d2 <xQueueGenericCreateStatic+0x7e>
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <xQueueGenericCreateStatic+0x82>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <xQueueGenericCreateStatic+0x84>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	61fb      	str	r3, [r7, #28]
}
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80022f2:	2350      	movs	r3, #80	; 0x50
 80022f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b50      	cmp	r3, #80	; 0x50
 80022fa:	d00a      	beq.n	8002312 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	61bb      	str	r3, [r7, #24]
}
 800230e:	bf00      	nop
 8002310:	e7fe      	b.n	8002310 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002312:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00d      	beq.n	800233a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800231e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002320:	2201      	movs	r2, #1
 8002322:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002326:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	4613      	mov	r3, r2
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	68b9      	ldr	r1, [r7, #8]
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 f805 	bl	8002344 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800233a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800233c:	4618      	mov	r0, r3
 800233e:	3730      	adds	r7, #48	; 0x30
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	e002      	b.n	8002366 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002372:	2101      	movs	r1, #1
 8002374:	69b8      	ldr	r0, [r7, #24]
 8002376:	f7ff ff05 	bl	8002184 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueGenericSend+0x32>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <xQueueGenericSend+0x40>
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <xQueueGenericSend+0x44>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <xQueueGenericSend+0x46>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <xQueueGenericSend+0x60>
	__asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023e8:	bf00      	nop
 80023ea:	e7fe      	b.n	80023ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d103      	bne.n	80023fa <xQueueGenericSend+0x6e>
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <xQueueGenericSend+0x72>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <xQueueGenericSend+0x74>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <xQueueGenericSend+0x8e>
	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	623b      	str	r3, [r7, #32]
}
 8002416:	bf00      	nop
 8002418:	e7fe      	b.n	8002418 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800241a:	f001 f9e7 	bl	80037ec <xTaskGetSchedulerState>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <xQueueGenericSend+0x9e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <xQueueGenericSend+0xa2>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <xQueueGenericSend+0xa4>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <xQueueGenericSend+0xbe>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	61fb      	str	r3, [r7, #28]
}
 8002446:	bf00      	nop
 8002448:	e7fe      	b.n	8002448 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800244a:	f001 ff2b 	bl	80042a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <xQueueGenericSend+0xd4>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d129      	bne.n	80024b4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002466:	f000 fa0b 	bl	8002880 <prvCopyDataToQueue>
 800246a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	3324      	adds	r3, #36	; 0x24
 8002478:	4618      	mov	r0, r3
 800247a:	f000 fff5 	bl	8003468 <xTaskRemoveFromEventList>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <xQueueGenericSend+0x1f8>)
 8002486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	e00a      	b.n	80024ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800249c:	4b39      	ldr	r3, [pc, #228]	; (8002584 <xQueueGenericSend+0x1f8>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024ac:	f001 ff2a 	bl	8004304 <vPortExitCritical>
				return pdPASS;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e063      	b.n	800257c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024ba:	f001 ff23 	bl	8004304 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	e05c      	b.n	800257c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f82f 	bl	8003530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024d6:	f001 ff15 	bl	8004304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024da:	f000 fd9b 	bl	8003014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024de:	f001 fee1 	bl	80042a4 <vPortEnterCritical>
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ee:	d103      	bne.n	80024f8 <xQueueGenericSend+0x16c>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002504:	d103      	bne.n	800250e <xQueueGenericSend+0x182>
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800250e:	f001 fef9 	bl	8004304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002512:	1d3a      	adds	r2, r7, #4
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f001 f81e 	bl	800355c <xTaskCheckForTimeOut>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d124      	bne.n	8002570 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002528:	f000 faa2 	bl	8002a70 <prvIsQueueFull>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d018      	beq.n	8002564 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	3310      	adds	r3, #16
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 ff44 	bl	80033c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002542:	f000 fa2d 	bl	80029a0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002546:	f000 fd73 	bl	8003030 <xTaskResumeAll>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f47f af7c 	bne.w	800244a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <xQueueGenericSend+0x1f8>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	e772      	b.n	800244a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002566:	f000 fa1b 	bl	80029a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800256a:	f000 fd61 	bl	8003030 <xTaskResumeAll>
 800256e:	e76c      	b.n	800244a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002572:	f000 fa15 	bl	80029a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002576:	f000 fd5b 	bl	8003030 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800257a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800257c:	4618      	mov	r0, r3
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	e000ed04 	.word	0xe000ed04

08002588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b090      	sub	sp, #64	; 0x40
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800259a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <xQueueGenericSendFromISR+0x3c>
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <xQueueGenericSendFromISR+0x40>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <xQueueGenericSendFromISR+0x42>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025e0:	bf00      	nop
 80025e2:	e7fe      	b.n	80025e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSendFromISR+0x6a>
 80025ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <xQueueGenericSendFromISR+0x6e>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <xQueueGenericSendFromISR+0x70>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	623b      	str	r3, [r7, #32]
}
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002612:	f001 ff29 	bl	8004468 <vPortValidateInterruptPriority>
	__asm volatile
 8002616:	f3ef 8211 	mrs	r2, BASEPRI
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	61fa      	str	r2, [r7, #28]
 800262c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800262e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002630:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <xQueueGenericSendFromISR+0xbc>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d12f      	bne.n	80026a4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800264a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002652:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002654:	683a      	ldr	r2, [r7, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800265a:	f000 f911 	bl	8002880 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800265e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002666:	d112      	bne.n	800268e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d016      	beq.n	800269e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002672:	3324      	adds	r3, #36	; 0x24
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fef7 	bl	8003468 <xTaskRemoveFromEventList>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e007      	b.n	800269e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800268e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002692:	3301      	adds	r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	b25a      	sxtb	r2, r3
 8002698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800269e:	2301      	movs	r3, #1
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80026a2:	e001      	b.n	80026a8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026a4:	2300      	movs	r3, #0
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026aa:	617b      	str	r3, [r7, #20]
	__asm volatile
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f383 8811 	msr	BASEPRI, r3
}
 80026b2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3740      	adds	r7, #64	; 0x40
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08c      	sub	sp, #48	; 0x30
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10a      	bne.n	80026f0 <xQueueReceive+0x30>
	__asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	623b      	str	r3, [r7, #32]
}
 80026ec:	bf00      	nop
 80026ee:	e7fe      	b.n	80026ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <xQueueReceive+0x3e>
 80026f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <xQueueReceive+0x42>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <xQueueReceive+0x44>
 8002702:	2300      	movs	r3, #0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10a      	bne.n	800271e <xQueueReceive+0x5e>
	__asm volatile
 8002708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270c:	f383 8811 	msr	BASEPRI, r3
 8002710:	f3bf 8f6f 	isb	sy
 8002714:	f3bf 8f4f 	dsb	sy
 8002718:	61fb      	str	r3, [r7, #28]
}
 800271a:	bf00      	nop
 800271c:	e7fe      	b.n	800271c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800271e:	f001 f865 	bl	80037ec <xTaskGetSchedulerState>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <xQueueReceive+0x6e>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <xQueueReceive+0x72>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <xQueueReceive+0x74>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10a      	bne.n	800274e <xQueueReceive+0x8e>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	61bb      	str	r3, [r7, #24]
}
 800274a:	bf00      	nop
 800274c:	e7fe      	b.n	800274c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800274e:	f001 fda9 	bl	80042a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01f      	beq.n	800279e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800275e:	68b9      	ldr	r1, [r7, #8]
 8002760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002762:	f000 f8f7 	bl	8002954 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00f      	beq.n	8002796 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	3310      	adds	r3, #16
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fe74 	bl	8003468 <xTaskRemoveFromEventList>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d007      	beq.n	8002796 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002786:	4b3d      	ldr	r3, [pc, #244]	; (800287c <xQueueReceive+0x1bc>)
 8002788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	f3bf 8f4f 	dsb	sy
 8002792:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002796:	f001 fdb5 	bl	8004304 <vPortExitCritical>
				return pdPASS;
 800279a:	2301      	movs	r3, #1
 800279c:	e069      	b.n	8002872 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d103      	bne.n	80027ac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027a4:	f001 fdae 	bl	8004304 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027a8:	2300      	movs	r3, #0
 80027aa:	e062      	b.n	8002872 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027b2:	f107 0310 	add.w	r3, r7, #16
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 feba 	bl	8003530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027bc:	2301      	movs	r3, #1
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027c0:	f001 fda0 	bl	8004304 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027c4:	f000 fc26 	bl	8003014 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027c8:	f001 fd6c 	bl	80042a4 <vPortEnterCritical>
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027d2:	b25b      	sxtb	r3, r3
 80027d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d8:	d103      	bne.n	80027e2 <xQueueReceive+0x122>
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e8:	b25b      	sxtb	r3, r3
 80027ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027ee:	d103      	bne.n	80027f8 <xQueueReceive+0x138>
 80027f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f8:	f001 fd84 	bl	8004304 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027fc:	1d3a      	adds	r2, r7, #4
 80027fe:	f107 0310 	add.w	r3, r7, #16
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f000 fea9 	bl	800355c <xTaskCheckForTimeOut>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d123      	bne.n	8002858 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002812:	f000 f917 	bl	8002a44 <prvIsQueueEmpty>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d017      	beq.n	800284c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	3324      	adds	r3, #36	; 0x24
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fdcf 	bl	80033c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800282a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800282c:	f000 f8b8 	bl	80029a0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002830:	f000 fbfe 	bl	8003030 <xTaskResumeAll>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d189      	bne.n	800274e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <xQueueReceive+0x1bc>)
 800283c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f3bf 8f4f 	dsb	sy
 8002846:	f3bf 8f6f 	isb	sy
 800284a:	e780      	b.n	800274e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800284c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800284e:	f000 f8a7 	bl	80029a0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002852:	f000 fbed 	bl	8003030 <xTaskResumeAll>
 8002856:	e77a      	b.n	800274e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285a:	f000 f8a1 	bl	80029a0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800285e:	f000 fbe7 	bl	8003030 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002862:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002864:	f000 f8ee 	bl	8002a44 <prvIsQueueEmpty>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	f43f af6f 	beq.w	800274e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002870:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002872:	4618      	mov	r0, r3
 8002874:	3730      	adds	r7, #48	; 0x30
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d14d      	bne.n	8002942 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 ffbc 	bl	8003828 <xTaskPriorityDisinherit>
 80028b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e043      	b.n	8002942 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d119      	bne.n	80028f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6858      	ldr	r0, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	461a      	mov	r2, r3
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	f002 f884 	bl	80049d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	441a      	add	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d32b      	bcc.n	8002942 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	e026      	b.n	8002942 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	68d8      	ldr	r0, [r3, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	461a      	mov	r2, r3
 80028fe:	68b9      	ldr	r1, [r7, #8]
 8002900:	f002 f86a 	bl	80049d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68da      	ldr	r2, [r3, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	425b      	negs	r3, r3
 800290e:	441a      	add	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d207      	bcs.n	8002930 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	425b      	negs	r3, r3
 800292a:	441a      	add	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d105      	bne.n	8002942 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	3b01      	subs	r3, #1
 8002940:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1c5a      	adds	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800294a:	697b      	ldr	r3, [r7, #20]
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	441a      	add	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	429a      	cmp	r2, r3
 800297e:	d303      	bcc.n	8002988 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68d9      	ldr	r1, [r3, #12]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	461a      	mov	r2, r3
 8002992:	6838      	ldr	r0, [r7, #0]
 8002994:	f002 f820 	bl	80049d8 <memcpy>
	}
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029a8:	f001 fc7c 	bl	80042a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029b2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029b4:	e011      	b.n	80029da <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d012      	beq.n	80029e4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3324      	adds	r3, #36	; 0x24
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fd50 	bl	8003468 <xTaskRemoveFromEventList>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80029ce:	f000 fe27 	bl	8003620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	dce9      	bgt.n	80029b6 <prvUnlockQueue+0x16>
 80029e2:	e000      	b.n	80029e6 <prvUnlockQueue+0x46>
					break;
 80029e4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80029ee:	f001 fc89 	bl	8004304 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80029f2:	f001 fc57 	bl	80042a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029fc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80029fe:	e011      	b.n	8002a24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d012      	beq.n	8002a2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3310      	adds	r3, #16
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f000 fd2b 	bl	8003468 <xTaskRemoveFromEventList>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a18:	f000 fe02 	bl	8003620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	dce9      	bgt.n	8002a00 <prvUnlockQueue+0x60>
 8002a2c:	e000      	b.n	8002a30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	22ff      	movs	r2, #255	; 0xff
 8002a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a38:	f001 fc64 	bl	8004304 <vPortExitCritical>
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a4c:	f001 fc2a 	bl	80042a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	60fb      	str	r3, [r7, #12]
 8002a5c:	e001      	b.n	8002a62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a62:	f001 fc4f 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8002a66:	68fb      	ldr	r3, [r7, #12]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a78:	f001 fc14 	bl	80042a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d102      	bne.n	8002a8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	60fb      	str	r3, [r7, #12]
 8002a8c:	e001      	b.n	8002a92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002a92:	f001 fc37 	bl	8004304 <vPortExitCritical>

	return xReturn;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	e014      	b.n	8002ada <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ab0:	4a0f      	ldr	r2, [pc, #60]	; (8002af0 <vQueueAddToRegistry+0x50>)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002abc:	490c      	ldr	r1, [pc, #48]	; (8002af0 <vQueueAddToRegistry+0x50>)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <vQueueAddToRegistry+0x50>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002ad2:	e006      	b.n	8002ae2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b07      	cmp	r3, #7
 8002ade:	d9e7      	bls.n	8002ab0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000830 	.word	0x20000830

08002af4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002b04:	f001 fbce 	bl	80042a4 <vPortEnterCritical>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b14:	d103      	bne.n	8002b1e <vQueueWaitForMessageRestricted+0x2a>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b24:	b25b      	sxtb	r3, r3
 8002b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b2a:	d103      	bne.n	8002b34 <vQueueWaitForMessageRestricted+0x40>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b34:	f001 fbe6 	bl	8004304 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 fc61 	bl	8003410 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002b4e:	6978      	ldr	r0, [r7, #20]
 8002b50:	f7ff ff26 	bl	80029a0 <prvUnlockQueue>
	}
 8002b54:	bf00      	nop
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08e      	sub	sp, #56	; 0x38
 8002b60:	af04      	add	r7, sp, #16
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	623b      	str	r3, [r7, #32]
}
 8002b82:	bf00      	nop
 8002b84:	e7fe      	b.n	8002b84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b90:	f383 8811 	msr	BASEPRI, r3
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	61fb      	str	r3, [r7, #28]
}
 8002b9e:	bf00      	nop
 8002ba0:	e7fe      	b.n	8002ba0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ba2:	23a8      	movs	r3, #168	; 0xa8
 8002ba4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2ba8      	cmp	r3, #168	; 0xa8
 8002baa:	d00a      	beq.n	8002bc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61bb      	str	r3, [r7, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002bc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d01e      	beq.n	8002c08 <xTaskCreateStatic+0xac>
 8002bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d01b      	beq.n	8002c08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002be2:	2300      	movs	r3, #0
 8002be4:	9303      	str	r3, [sp, #12]
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9302      	str	r3, [sp, #8]
 8002bea:	f107 0314 	add.w	r3, r7, #20
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f850 	bl	8002ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c02:	f000 f8f3 	bl	8002dec <prvAddNewTaskToReadyList>
 8002c06:	e001      	b.n	8002c0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c0c:	697b      	ldr	r3, [r7, #20]
	}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3728      	adds	r7, #40	; 0x28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b08c      	sub	sp, #48	; 0x30
 8002c1a:	af04      	add	r7, sp, #16
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	4613      	mov	r3, r2
 8002c24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002c26:	88fb      	ldrh	r3, [r7, #6]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fc5c 	bl	80044e8 <pvPortMalloc>
 8002c30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002c38:	20a8      	movs	r0, #168	; 0xa8
 8002c3a:	f001 fc55 	bl	80044e8 <pvPortMalloc>
 8002c3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4c:	e005      	b.n	8002c5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c4e:	6978      	ldr	r0, [r7, #20]
 8002c50:	f001 fd16 	bl	8004680 <vPortFree>
 8002c54:	e001      	b.n	8002c5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d017      	beq.n	8002c90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9303      	str	r3, [sp, #12]
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	9302      	str	r3, [sp, #8]
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	9301      	str	r3, [sp, #4]
 8002c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 f80e 	bl	8002ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c84:	69f8      	ldr	r0, [r7, #28]
 8002c86:	f000 f8b1 	bl	8002dec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61bb      	str	r3, [r7, #24]
 8002c8e:	e002      	b.n	8002c96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c96:	69bb      	ldr	r3, [r7, #24]
	}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3720      	adds	r7, #32
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b088      	sub	sp, #32
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	21a5      	movs	r1, #165	; 0xa5
 8002cba:	f001 fe0b 	bl	80048d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	617b      	str	r3, [r7, #20]
}
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01f      	beq.n	8002d3e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
 8002d02:	e012      	b.n	8002d2a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	7819      	ldrb	r1, [r3, #0]
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	4413      	add	r3, r2
 8002d12:	3334      	adds	r3, #52	; 0x34
 8002d14:	460a      	mov	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d006      	beq.n	8002d32 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	3301      	adds	r3, #1
 8002d28:	61fb      	str	r3, [r7, #28]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d9e9      	bls.n	8002d04 <prvInitialiseNewTask+0x64>
 8002d30:	e000      	b.n	8002d34 <prvInitialiseNewTask+0x94>
			{
				break;
 8002d32:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d3c:	e003      	b.n	8002d46 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d48:	2b37      	cmp	r3, #55	; 0x37
 8002d4a:	d901      	bls.n	8002d50 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d4c:	2337      	movs	r3, #55	; 0x37
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5e:	2200      	movs	r2, #0
 8002d60:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	3304      	adds	r3, #4
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f978 	bl	800205c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	3318      	adds	r3, #24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff f973 	bl	800205c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	3354      	adds	r3, #84	; 0x54
 8002da0:	224c      	movs	r2, #76	; 0x4c
 8002da2:	2100      	movs	r1, #0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f001 fd95 	bl	80048d4 <memset>
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	4a0c      	ldr	r2, [pc, #48]	; (8002de0 <prvInitialiseNewTask+0x140>)
 8002dae:	659a      	str	r2, [r3, #88]	; 0x58
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <prvInitialiseNewTask+0x144>)
 8002db4:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <prvInitialiseNewTask+0x148>)
 8002dba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	68f9      	ldr	r1, [r7, #12]
 8002dc0:	69b8      	ldr	r0, [r7, #24]
 8002dc2:	f001 f941 	bl	8004048 <pxPortInitialiseStack>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dd8:	bf00      	nop
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	20004ac8 	.word	0x20004ac8
 8002de4:	20004b30 	.word	0x20004b30
 8002de8:	20004b98 	.word	0x20004b98

08002dec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002df4:	f001 fa56 	bl	80042a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002df8:	4b2d      	ldr	r3, [pc, #180]	; (8002eb0 <prvAddNewTaskToReadyList+0xc4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <prvAddNewTaskToReadyList+0xc4>)
 8002e00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e02:	4b2c      	ldr	r3, [pc, #176]	; (8002eb4 <prvAddNewTaskToReadyList+0xc8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e0a:	4a2a      	ldr	r2, [pc, #168]	; (8002eb4 <prvAddNewTaskToReadyList+0xc8>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e10:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <prvAddNewTaskToReadyList+0xc4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d110      	bne.n	8002e3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e18:	f000 fc26 	bl	8003668 <prvInitialiseTaskLists>
 8002e1c:	e00d      	b.n	8002e3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <prvAddNewTaskToReadyList+0xcc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d109      	bne.n	8002e3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <prvAddNewTaskToReadyList+0xc8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d802      	bhi.n	8002e3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e34:	4a1f      	ldr	r2, [pc, #124]	; (8002eb4 <prvAddNewTaskToReadyList+0xc8>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <prvAddNewTaskToReadyList+0xd0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <prvAddNewTaskToReadyList+0xd0>)
 8002e42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002e44:	4b1d      	ldr	r3, [pc, #116]	; (8002ebc <prvAddNewTaskToReadyList+0xd0>)
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	4b1b      	ldr	r3, [pc, #108]	; (8002ec0 <prvAddNewTaskToReadyList+0xd4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d903      	bls.n	8002e60 <prvAddNewTaskToReadyList+0x74>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <prvAddNewTaskToReadyList+0xd4>)
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	4613      	mov	r3, r2
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <prvAddNewTaskToReadyList+0xd8>)
 8002e6e:	441a      	add	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3304      	adds	r3, #4
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f7ff f8fd 	bl	8002076 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e7c:	f001 fa42 	bl	8004304 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e80:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <prvAddNewTaskToReadyList+0xcc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00e      	beq.n	8002ea6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e88:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <prvAddNewTaskToReadyList+0xc8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d207      	bcs.n	8002ea6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <prvAddNewTaskToReadyList+0xdc>)
 8002e98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	20000d44 	.word	0x20000d44
 8002eb4:	20000870 	.word	0x20000870
 8002eb8:	20000d50 	.word	0x20000d50
 8002ebc:	20000d60 	.word	0x20000d60
 8002ec0:	20000d4c 	.word	0x20000d4c
 8002ec4:	20000874 	.word	0x20000874
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d017      	beq.n	8002f0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ede:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <vTaskDelay+0x60>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <vTaskDelay+0x30>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	60bb      	str	r3, [r7, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002efc:	f000 f88a 	bl	8003014 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f00:	2100      	movs	r1, #0
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fcfe 	bl	8003904 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f08:	f000 f892 	bl	8003030 <xTaskResumeAll>
 8002f0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d107      	bne.n	8002f24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <vTaskDelay+0x64>)
 8002f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f24:	bf00      	nop
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	20000d6c 	.word	0x20000d6c
 8002f30:	e000ed04 	.word	0xe000ed04

08002f34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f42:	463a      	mov	r2, r7
 8002f44:	1d39      	adds	r1, r7, #4
 8002f46:	f107 0308 	add.w	r3, r7, #8
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f832 	bl	8001fb4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f50:	6839      	ldr	r1, [r7, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	9202      	str	r2, [sp, #8]
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	460a      	mov	r2, r1
 8002f62:	4924      	ldr	r1, [pc, #144]	; (8002ff4 <vTaskStartScheduler+0xc0>)
 8002f64:	4824      	ldr	r0, [pc, #144]	; (8002ff8 <vTaskStartScheduler+0xc4>)
 8002f66:	f7ff fdf9 	bl	8002b5c <xTaskCreateStatic>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a23      	ldr	r2, [pc, #140]	; (8002ffc <vTaskStartScheduler+0xc8>)
 8002f6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f70:	4b22      	ldr	r3, [pc, #136]	; (8002ffc <vTaskStartScheduler+0xc8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e001      	b.n	8002f82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d102      	bne.n	8002f8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002f88:	f000 fd10 	bl	80039ac <xTimerCreateTimerTask>
 8002f8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d11b      	bne.n	8002fcc <vTaskStartScheduler+0x98>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	613b      	str	r3, [r7, #16]
}
 8002fa6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002fa8:	4b15      	ldr	r3, [pc, #84]	; (8003000 <vTaskStartScheduler+0xcc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3354      	adds	r3, #84	; 0x54
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <vTaskStartScheduler+0xd0>)
 8002fb0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <vTaskStartScheduler+0xd4>)
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <vTaskStartScheduler+0xd8>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002fc0:	4b13      	ldr	r3, [pc, #76]	; (8003010 <vTaskStartScheduler+0xdc>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fc6:	f001 f8cb 	bl	8004160 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fca:	e00e      	b.n	8002fea <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd2:	d10a      	bne.n	8002fea <vTaskStartScheduler+0xb6>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	f383 8811 	msr	BASEPRI, r3
 8002fdc:	f3bf 8f6f 	isb	sy
 8002fe0:	f3bf 8f4f 	dsb	sy
 8002fe4:	60fb      	str	r3, [r7, #12]
}
 8002fe6:	bf00      	nop
 8002fe8:	e7fe      	b.n	8002fe8 <vTaskStartScheduler+0xb4>
}
 8002fea:	bf00      	nop
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	08004ab8 	.word	0x08004ab8
 8002ff8:	08003639 	.word	0x08003639
 8002ffc:	20000d68 	.word	0x20000d68
 8003000:	20000870 	.word	0x20000870
 8003004:	2000005c 	.word	0x2000005c
 8003008:	20000d64 	.word	0x20000d64
 800300c:	20000d50 	.word	0x20000d50
 8003010:	20000d48 	.word	0x20000d48

08003014 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003018:	4b04      	ldr	r3, [pc, #16]	; (800302c <vTaskSuspendAll+0x18>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3301      	adds	r3, #1
 800301e:	4a03      	ldr	r2, [pc, #12]	; (800302c <vTaskSuspendAll+0x18>)
 8003020:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	20000d6c 	.word	0x20000d6c

08003030 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800303e:	4b42      	ldr	r3, [pc, #264]	; (8003148 <xTaskResumeAll+0x118>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10a      	bne.n	800305c <xTaskResumeAll+0x2c>
	__asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	603b      	str	r3, [r7, #0]
}
 8003058:	bf00      	nop
 800305a:	e7fe      	b.n	800305a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800305c:	f001 f922 	bl	80042a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003060:	4b39      	ldr	r3, [pc, #228]	; (8003148 <xTaskResumeAll+0x118>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	4a38      	ldr	r2, [pc, #224]	; (8003148 <xTaskResumeAll+0x118>)
 8003068:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <xTaskResumeAll+0x118>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d162      	bne.n	8003138 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003072:	4b36      	ldr	r3, [pc, #216]	; (800314c <xTaskResumeAll+0x11c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d05e      	beq.n	8003138 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800307a:	e02f      	b.n	80030dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800307c:	4b34      	ldr	r3, [pc, #208]	; (8003150 <xTaskResumeAll+0x120>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3318      	adds	r3, #24
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff f851 	bl	8002130 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3304      	adds	r3, #4
 8003092:	4618      	mov	r0, r3
 8003094:	f7ff f84c 	bl	8002130 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309c:	4b2d      	ldr	r3, [pc, #180]	; (8003154 <xTaskResumeAll+0x124>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d903      	bls.n	80030ac <xTaskResumeAll+0x7c>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	4a2a      	ldr	r2, [pc, #168]	; (8003154 <xTaskResumeAll+0x124>)
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4a27      	ldr	r2, [pc, #156]	; (8003158 <xTaskResumeAll+0x128>)
 80030ba:	441a      	add	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	3304      	adds	r3, #4
 80030c0:	4619      	mov	r1, r3
 80030c2:	4610      	mov	r0, r2
 80030c4:	f7fe ffd7 	bl	8002076 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030cc:	4b23      	ldr	r3, [pc, #140]	; (800315c <xTaskResumeAll+0x12c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80030d6:	4b22      	ldr	r3, [pc, #136]	; (8003160 <xTaskResumeAll+0x130>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <xTaskResumeAll+0x120>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1cb      	bne.n	800307c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030ea:	f000 fb5f 	bl	80037ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80030ee:	4b1d      	ldr	r3, [pc, #116]	; (8003164 <xTaskResumeAll+0x134>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d010      	beq.n	800311c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030fa:	f000 f847 	bl	800318c <xTaskIncrementTick>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d002      	beq.n	800310a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003104:	4b16      	ldr	r3, [pc, #88]	; (8003160 <xTaskResumeAll+0x130>)
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3b01      	subs	r3, #1
 800310e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f1      	bne.n	80030fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003116:	4b13      	ldr	r3, [pc, #76]	; (8003164 <xTaskResumeAll+0x134>)
 8003118:	2200      	movs	r2, #0
 800311a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <xTaskResumeAll+0x130>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d009      	beq.n	8003138 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003124:	2301      	movs	r3, #1
 8003126:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <xTaskResumeAll+0x138>)
 800312a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003138:	f001 f8e4 	bl	8004304 <vPortExitCritical>

	return xAlreadyYielded;
 800313c:	68bb      	ldr	r3, [r7, #8]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000d6c 	.word	0x20000d6c
 800314c:	20000d44 	.word	0x20000d44
 8003150:	20000d04 	.word	0x20000d04
 8003154:	20000d4c 	.word	0x20000d4c
 8003158:	20000874 	.word	0x20000874
 800315c:	20000870 	.word	0x20000870
 8003160:	20000d58 	.word	0x20000d58
 8003164:	20000d54 	.word	0x20000d54
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <xTaskGetTickCount+0x1c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003178:	687b      	ldr	r3, [r7, #4]
}
 800317a:	4618      	mov	r0, r3
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	20000d48 	.word	0x20000d48

0800318c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003196:	4b4f      	ldr	r3, [pc, #316]	; (80032d4 <xTaskIncrementTick+0x148>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f040 808f 	bne.w	80032be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80031a0:	4b4d      	ldr	r3, [pc, #308]	; (80032d8 <xTaskIncrementTick+0x14c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <xTaskIncrementTick+0x14c>)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d120      	bne.n	80031f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80031b4:	4b49      	ldr	r3, [pc, #292]	; (80032dc <xTaskIncrementTick+0x150>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80031be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c2:	f383 8811 	msr	BASEPRI, r3
 80031c6:	f3bf 8f6f 	isb	sy
 80031ca:	f3bf 8f4f 	dsb	sy
 80031ce:	603b      	str	r3, [r7, #0]
}
 80031d0:	bf00      	nop
 80031d2:	e7fe      	b.n	80031d2 <xTaskIncrementTick+0x46>
 80031d4:	4b41      	ldr	r3, [pc, #260]	; (80032dc <xTaskIncrementTick+0x150>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
 80031da:	4b41      	ldr	r3, [pc, #260]	; (80032e0 <xTaskIncrementTick+0x154>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <xTaskIncrementTick+0x150>)
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4a3f      	ldr	r2, [pc, #252]	; (80032e0 <xTaskIncrementTick+0x154>)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <xTaskIncrementTick+0x158>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	4a3d      	ldr	r2, [pc, #244]	; (80032e4 <xTaskIncrementTick+0x158>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	f000 fadb 	bl	80037ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031f6:	4b3c      	ldr	r3, [pc, #240]	; (80032e8 <xTaskIncrementTick+0x15c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d349      	bcc.n	8003294 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003200:	4b36      	ldr	r3, [pc, #216]	; (80032dc <xTaskIncrementTick+0x150>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800320a:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <xTaskIncrementTick+0x15c>)
 800320c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003210:	601a      	str	r2, [r3, #0]
					break;
 8003212:	e03f      	b.n	8003294 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003214:	4b31      	ldr	r3, [pc, #196]	; (80032dc <xTaskIncrementTick+0x150>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d203      	bcs.n	8003234 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800322c:	4a2e      	ldr	r2, [pc, #184]	; (80032e8 <xTaskIncrementTick+0x15c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003232:	e02f      	b.n	8003294 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	3304      	adds	r3, #4
 8003238:	4618      	mov	r0, r3
 800323a:	f7fe ff79 	bl	8002130 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d004      	beq.n	8003250 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	3318      	adds	r3, #24
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe ff70 	bl	8002130 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <xTaskIncrementTick+0x160>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d903      	bls.n	8003264 <xTaskIncrementTick+0xd8>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <xTaskIncrementTick+0x160>)
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4a1f      	ldr	r2, [pc, #124]	; (80032f0 <xTaskIncrementTick+0x164>)
 8003272:	441a      	add	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3304      	adds	r3, #4
 8003278:	4619      	mov	r1, r3
 800327a:	4610      	mov	r0, r2
 800327c:	f7fe fefb 	bl	8002076 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003284:	4b1b      	ldr	r3, [pc, #108]	; (80032f4 <xTaskIncrementTick+0x168>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	429a      	cmp	r2, r3
 800328c:	d3b8      	bcc.n	8003200 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800328e:	2301      	movs	r3, #1
 8003290:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003292:	e7b5      	b.n	8003200 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003294:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <xTaskIncrementTick+0x168>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800329a:	4915      	ldr	r1, [pc, #84]	; (80032f0 <xTaskIncrementTick+0x164>)
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d901      	bls.n	80032b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80032b0:	4b11      	ldr	r3, [pc, #68]	; (80032f8 <xTaskIncrementTick+0x16c>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80032b8:	2301      	movs	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e004      	b.n	80032c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <xTaskIncrementTick+0x170>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <xTaskIncrementTick+0x170>)
 80032c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80032c8:	697b      	ldr	r3, [r7, #20]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000d6c 	.word	0x20000d6c
 80032d8:	20000d48 	.word	0x20000d48
 80032dc:	20000cfc 	.word	0x20000cfc
 80032e0:	20000d00 	.word	0x20000d00
 80032e4:	20000d5c 	.word	0x20000d5c
 80032e8:	20000d64 	.word	0x20000d64
 80032ec:	20000d4c 	.word	0x20000d4c
 80032f0:	20000874 	.word	0x20000874
 80032f4:	20000870 	.word	0x20000870
 80032f8:	20000d58 	.word	0x20000d58
 80032fc:	20000d54 	.word	0x20000d54

08003300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003306:	4b2a      	ldr	r3, [pc, #168]	; (80033b0 <vTaskSwitchContext+0xb0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800330e:	4b29      	ldr	r3, [pc, #164]	; (80033b4 <vTaskSwitchContext+0xb4>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003314:	e046      	b.n	80033a4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003316:	4b27      	ldr	r3, [pc, #156]	; (80033b4 <vTaskSwitchContext+0xb4>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800331c:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <vTaskSwitchContext+0xb8>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e010      	b.n	8003346 <vTaskSwitchContext+0x46>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <vTaskSwitchContext+0x40>
	__asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	607b      	str	r3, [r7, #4]
}
 800333c:	bf00      	nop
 800333e:	e7fe      	b.n	800333e <vTaskSwitchContext+0x3e>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	3b01      	subs	r3, #1
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	491d      	ldr	r1, [pc, #116]	; (80033bc <vTaskSwitchContext+0xbc>)
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	4613      	mov	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d0e4      	beq.n	8003324 <vTaskSwitchContext+0x24>
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4a15      	ldr	r2, [pc, #84]	; (80033bc <vTaskSwitchContext+0xbc>)
 8003366:	4413      	add	r3, r2
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	605a      	str	r2, [r3, #4]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	3308      	adds	r3, #8
 800337c:	429a      	cmp	r2, r3
 800337e:	d104      	bne.n	800338a <vTaskSwitchContext+0x8a>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <vTaskSwitchContext+0xc0>)
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <vTaskSwitchContext+0xb8>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <vTaskSwitchContext+0xc0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3354      	adds	r3, #84	; 0x54
 80033a0:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <vTaskSwitchContext+0xc4>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	20000d6c 	.word	0x20000d6c
 80033b4:	20000d58 	.word	0x20000d58
 80033b8:	20000d4c 	.word	0x20000d4c
 80033bc:	20000874 	.word	0x20000874
 80033c0:	20000870 	.word	0x20000870
 80033c4:	2000005c 	.word	0x2000005c

080033c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d10a      	bne.n	80033ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	60fb      	str	r3, [r7, #12]
}
 80033ea:	bf00      	nop
 80033ec:	e7fe      	b.n	80033ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <vTaskPlaceOnEventList+0x44>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3318      	adds	r3, #24
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7fe fe61 	bl	80020be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033fc:	2101      	movs	r1, #1
 80033fe:	6838      	ldr	r0, [r7, #0]
 8003400:	f000 fa80 	bl	8003904 <prvAddCurrentTaskToDelayedList>
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000870 	.word	0x20000870

08003410 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	617b      	str	r3, [r7, #20]
}
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003438:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <vTaskPlaceOnEventListRestricted+0x54>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3318      	adds	r3, #24
 800343e:	4619      	mov	r1, r3
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7fe fe18 	bl	8002076 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d002      	beq.n	8003452 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800344c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003450:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	68b8      	ldr	r0, [r7, #8]
 8003456:	f000 fa55 	bl	8003904 <prvAddCurrentTaskToDelayedList>
	}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000870 	.word	0x20000870

08003468 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10a      	bne.n	8003494 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800347e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003482:	f383 8811 	msr	BASEPRI, r3
 8003486:	f3bf 8f6f 	isb	sy
 800348a:	f3bf 8f4f 	dsb	sy
 800348e:	60fb      	str	r3, [r7, #12]
}
 8003490:	bf00      	nop
 8003492:	e7fe      	b.n	8003492 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	3318      	adds	r3, #24
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fe49 	bl	8002130 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800349e:	4b1e      	ldr	r3, [pc, #120]	; (8003518 <xTaskRemoveFromEventList+0xb0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11d      	bne.n	80034e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3304      	adds	r3, #4
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fe fe40 	bl	8002130 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <xTaskRemoveFromEventList+0xb4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d903      	bls.n	80034c4 <xTaskRemoveFromEventList+0x5c>
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <xTaskRemoveFromEventList+0xb4>)
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4a13      	ldr	r2, [pc, #76]	; (8003520 <xTaskRemoveFromEventList+0xb8>)
 80034d2:	441a      	add	r2, r3
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f7fe fdcb 	bl	8002076 <vListInsertEnd>
 80034e0:	e005      	b.n	80034ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	3318      	adds	r3, #24
 80034e6:	4619      	mov	r1, r3
 80034e8:	480e      	ldr	r0, [pc, #56]	; (8003524 <xTaskRemoveFromEventList+0xbc>)
 80034ea:	f7fe fdc4 	bl	8002076 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <xTaskRemoveFromEventList+0xc0>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d905      	bls.n	8003508 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003500:	4b0a      	ldr	r3, [pc, #40]	; (800352c <xTaskRemoveFromEventList+0xc4>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	e001      	b.n	800350c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800350c:	697b      	ldr	r3, [r7, #20]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3718      	adds	r7, #24
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000d6c 	.word	0x20000d6c
 800351c:	20000d4c 	.word	0x20000d4c
 8003520:	20000874 	.word	0x20000874
 8003524:	20000d04 	.word	0x20000d04
 8003528:	20000870 	.word	0x20000870
 800352c:	20000d58 	.word	0x20000d58

08003530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <vTaskInternalSetTimeOutState+0x24>)
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <vTaskInternalSetTimeOutState+0x28>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	605a      	str	r2, [r3, #4]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	20000d5c 	.word	0x20000d5c
 8003558:	20000d48 	.word	0x20000d48

0800355c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d10a      	bne.n	8003582 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800356c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003570:	f383 8811 	msr	BASEPRI, r3
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	613b      	str	r3, [r7, #16]
}
 800357e:	bf00      	nop
 8003580:	e7fe      	b.n	8003580 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10a      	bne.n	800359e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	60fb      	str	r3, [r7, #12]
}
 800359a:	bf00      	nop
 800359c:	e7fe      	b.n	800359c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800359e:	f000 fe81 	bl	80042a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80035a2:	4b1d      	ldr	r3, [pc, #116]	; (8003618 <xTaskCheckForTimeOut+0xbc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035ba:	d102      	bne.n	80035c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80035bc:	2300      	movs	r3, #0
 80035be:	61fb      	str	r3, [r7, #28]
 80035c0:	e023      	b.n	800360a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <xTaskCheckForTimeOut+0xc0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d007      	beq.n	80035de <xTaskCheckForTimeOut+0x82>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80035d8:	2301      	movs	r3, #1
 80035da:	61fb      	str	r3, [r7, #28]
 80035dc:	e015      	b.n	800360a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d20b      	bcs.n	8003600 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	1ad2      	subs	r2, r2, r3
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ff9b 	bl	8003530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	e004      	b.n	800360a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003606:	2301      	movs	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800360a:	f000 fe7b 	bl	8004304 <vPortExitCritical>

	return xReturn;
 800360e:	69fb      	ldr	r3, [r7, #28]
}
 8003610:	4618      	mov	r0, r3
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	20000d48 	.word	0x20000d48
 800361c:	20000d5c 	.word	0x20000d5c

08003620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003624:	4b03      	ldr	r3, [pc, #12]	; (8003634 <vTaskMissedYield+0x14>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	20000d58 	.word	0x20000d58

08003638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003640:	f000 f852 	bl	80036e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003644:	4b06      	ldr	r3, [pc, #24]	; (8003660 <prvIdleTask+0x28>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d9f9      	bls.n	8003640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <prvIdleTask+0x2c>)
 800364e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800365c:	e7f0      	b.n	8003640 <prvIdleTask+0x8>
 800365e:	bf00      	nop
 8003660:	20000874 	.word	0x20000874
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800366e:	2300      	movs	r3, #0
 8003670:	607b      	str	r3, [r7, #4]
 8003672:	e00c      	b.n	800368e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <prvInitialiseTaskLists+0x60>)
 8003680:	4413      	add	r3, r2
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fcca 	bl	800201c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3301      	adds	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b37      	cmp	r3, #55	; 0x37
 8003692:	d9ef      	bls.n	8003674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003694:	480d      	ldr	r0, [pc, #52]	; (80036cc <prvInitialiseTaskLists+0x64>)
 8003696:	f7fe fcc1 	bl	800201c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800369a:	480d      	ldr	r0, [pc, #52]	; (80036d0 <prvInitialiseTaskLists+0x68>)
 800369c:	f7fe fcbe 	bl	800201c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <prvInitialiseTaskLists+0x6c>)
 80036a2:	f7fe fcbb 	bl	800201c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80036a6:	480c      	ldr	r0, [pc, #48]	; (80036d8 <prvInitialiseTaskLists+0x70>)
 80036a8:	f7fe fcb8 	bl	800201c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <prvInitialiseTaskLists+0x74>)
 80036ae:	f7fe fcb5 	bl	800201c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	; (80036e0 <prvInitialiseTaskLists+0x78>)
 80036b4:	4a05      	ldr	r2, [pc, #20]	; (80036cc <prvInitialiseTaskLists+0x64>)
 80036b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <prvInitialiseTaskLists+0x7c>)
 80036ba:	4a05      	ldr	r2, [pc, #20]	; (80036d0 <prvInitialiseTaskLists+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000874 	.word	0x20000874
 80036cc:	20000cd4 	.word	0x20000cd4
 80036d0:	20000ce8 	.word	0x20000ce8
 80036d4:	20000d04 	.word	0x20000d04
 80036d8:	20000d18 	.word	0x20000d18
 80036dc:	20000d30 	.word	0x20000d30
 80036e0:	20000cfc 	.word	0x20000cfc
 80036e4:	20000d00 	.word	0x20000d00

080036e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036ee:	e019      	b.n	8003724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80036f0:	f000 fdd8 	bl	80042a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036f4:	4b10      	ldr	r3, [pc, #64]	; (8003738 <prvCheckTasksWaitingTermination+0x50>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4618      	mov	r0, r3
 8003702:	f7fe fd15 	bl	8002130 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <prvCheckTasksWaitingTermination+0x54>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3b01      	subs	r3, #1
 800370c:	4a0b      	ldr	r2, [pc, #44]	; (800373c <prvCheckTasksWaitingTermination+0x54>)
 800370e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003710:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <prvCheckTasksWaitingTermination+0x58>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3b01      	subs	r3, #1
 8003716:	4a0a      	ldr	r2, [pc, #40]	; (8003740 <prvCheckTasksWaitingTermination+0x58>)
 8003718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800371a:	f000 fdf3 	bl	8004304 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f810 	bl	8003744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003724:	4b06      	ldr	r3, [pc, #24]	; (8003740 <prvCheckTasksWaitingTermination+0x58>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e1      	bne.n	80036f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800372c:	bf00      	nop
 800372e:	bf00      	nop
 8003730:	3708      	adds	r7, #8
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000d18 	.word	0x20000d18
 800373c:	20000d44 	.word	0x20000d44
 8003740:	20000d2c 	.word	0x20000d2c

08003744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	3354      	adds	r3, #84	; 0x54
 8003750:	4618      	mov	r0, r3
 8003752:	f001 f8c7 	bl	80048e4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800375c:	2b00      	cmp	r3, #0
 800375e:	d108      	bne.n	8003772 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	4618      	mov	r0, r3
 8003766:	f000 ff8b 	bl	8004680 <vPortFree>
				vPortFree( pxTCB );
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 ff88 	bl	8004680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003770:	e018      	b.n	80037a4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8003778:	2b01      	cmp	r3, #1
 800377a:	d103      	bne.n	8003784 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 ff7f 	bl	8004680 <vPortFree>
	}
 8003782:	e00f      	b.n	80037a4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800378a:	2b02      	cmp	r3, #2
 800378c:	d00a      	beq.n	80037a4 <prvDeleteTCB+0x60>
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	60fb      	str	r3, [r7, #12]
}
 80037a0:	bf00      	nop
 80037a2:	e7fe      	b.n	80037a2 <prvDeleteTCB+0x5e>
	}
 80037a4:	bf00      	nop
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <prvResetNextTaskUnblockTime+0x38>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d104      	bne.n	80037c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <prvResetNextTaskUnblockTime+0x3c>)
 80037be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80037c4:	e008      	b.n	80037d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <prvResetNextTaskUnblockTime+0x38>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a04      	ldr	r2, [pc, #16]	; (80037e8 <prvResetNextTaskUnblockTime+0x3c>)
 80037d6:	6013      	str	r3, [r2, #0]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	20000cfc 	.word	0x20000cfc
 80037e8:	20000d64 	.word	0x20000d64

080037ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <xTaskGetSchedulerState+0x34>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d102      	bne.n	8003800 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037fa:	2301      	movs	r3, #1
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	e008      	b.n	8003812 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <xTaskGetSchedulerState+0x38>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d102      	bne.n	800380e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003808:	2302      	movs	r3, #2
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	e001      	b.n	8003812 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800380e:	2300      	movs	r3, #0
 8003810:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003812:	687b      	ldr	r3, [r7, #4]
	}
 8003814:	4618      	mov	r0, r3
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	20000d50 	.word	0x20000d50
 8003824:	20000d6c 	.word	0x20000d6c

08003828 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d056      	beq.n	80038ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800383e:	4b2e      	ldr	r3, [pc, #184]	; (80038f8 <xTaskPriorityDisinherit+0xd0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	429a      	cmp	r2, r3
 8003846:	d00a      	beq.n	800385e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	60fb      	str	r3, [r7, #12]
}
 800385a:	bf00      	nop
 800385c:	e7fe      	b.n	800385c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10a      	bne.n	800387c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	f383 8811 	msr	BASEPRI, r3
 800386e:	f3bf 8f6f 	isb	sy
 8003872:	f3bf 8f4f 	dsb	sy
 8003876:	60bb      	str	r3, [r7, #8]
}
 8003878:	bf00      	nop
 800387a:	e7fe      	b.n	800387a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800388e:	429a      	cmp	r2, r3
 8003890:	d02c      	beq.n	80038ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d128      	bne.n	80038ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	3304      	adds	r3, #4
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fc46 	bl	8002130 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	4b0f      	ldr	r3, [pc, #60]	; (80038fc <xTaskPriorityDisinherit+0xd4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d903      	bls.n	80038cc <xTaskPriorityDisinherit+0xa4>
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <xTaskPriorityDisinherit+0xd4>)
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	4a09      	ldr	r2, [pc, #36]	; (8003900 <xTaskPriorityDisinherit+0xd8>)
 80038da:	441a      	add	r2, r3
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	3304      	adds	r3, #4
 80038e0:	4619      	mov	r1, r3
 80038e2:	4610      	mov	r0, r2
 80038e4:	f7fe fbc7 	bl	8002076 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80038e8:	2301      	movs	r3, #1
 80038ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80038ec:	697b      	ldr	r3, [r7, #20]
	}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000870 	.word	0x20000870
 80038fc:	20000d4c 	.word	0x20000d4c
 8003900:	20000874 	.word	0x20000874

08003904 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <prvAddCurrentTaskToDelayedList+0x90>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003914:	4b20      	ldr	r3, [pc, #128]	; (8003998 <prvAddCurrentTaskToDelayedList+0x94>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	4618      	mov	r0, r3
 800391c:	f7fe fc08 	bl	8002130 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003926:	d10a      	bne.n	800393e <prvAddCurrentTaskToDelayedList+0x3a>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d007      	beq.n	800393e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <prvAddCurrentTaskToDelayedList+0x94>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4819      	ldr	r0, [pc, #100]	; (800399c <prvAddCurrentTaskToDelayedList+0x98>)
 8003938:	f7fe fb9d 	bl	8002076 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800393c:	e026      	b.n	800398c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003946:	4b14      	ldr	r3, [pc, #80]	; (8003998 <prvAddCurrentTaskToDelayedList+0x94>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68ba      	ldr	r2, [r7, #8]
 800394c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	429a      	cmp	r2, r3
 8003954:	d209      	bcs.n	800396a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <prvAddCurrentTaskToDelayedList+0x94>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3304      	adds	r3, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4610      	mov	r0, r2
 8003964:	f7fe fbab 	bl	80020be <vListInsert>
}
 8003968:	e010      	b.n	800398c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800396a:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <prvAddCurrentTaskToDelayedList+0x94>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f7fe fba1 	bl	80020be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	d202      	bcs.n	800398c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003986:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	6013      	str	r3, [r2, #0]
}
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000d48 	.word	0x20000d48
 8003998:	20000870 	.word	0x20000870
 800399c:	20000d30 	.word	0x20000d30
 80039a0:	20000d00 	.word	0x20000d00
 80039a4:	20000cfc 	.word	0x20000cfc
 80039a8:	20000d64 	.word	0x20000d64

080039ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b08a      	sub	sp, #40	; 0x28
 80039b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80039b6:	f000 fb07 	bl	8003fc8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80039ba:	4b1c      	ldr	r3, [pc, #112]	; (8003a2c <xTimerCreateTimerTask+0x80>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d021      	beq.n	8003a06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80039ca:	1d3a      	adds	r2, r7, #4
 80039cc:	f107 0108 	add.w	r1, r7, #8
 80039d0:	f107 030c 	add.w	r3, r7, #12
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fb07 	bl	8001fe8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	9202      	str	r2, [sp, #8]
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	2302      	movs	r3, #2
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2300      	movs	r3, #0
 80039ea:	460a      	mov	r2, r1
 80039ec:	4910      	ldr	r1, [pc, #64]	; (8003a30 <xTimerCreateTimerTask+0x84>)
 80039ee:	4811      	ldr	r0, [pc, #68]	; (8003a34 <xTimerCreateTimerTask+0x88>)
 80039f0:	f7ff f8b4 	bl	8002b5c <xTaskCreateStatic>
 80039f4:	4603      	mov	r3, r0
 80039f6:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <xTimerCreateTimerTask+0x8c>)
 80039f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <xTimerCreateTimerTask+0x8c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a02:	2301      	movs	r3, #1
 8003a04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	613b      	str	r3, [r7, #16]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a22:	697b      	ldr	r3, [r7, #20]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	20000da0 	.word	0x20000da0
 8003a30:	08004ac0 	.word	0x08004ac0
 8003a34:	08003b71 	.word	0x08003b71
 8003a38:	20000da4 	.word	0x20000da4

08003a3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b08a      	sub	sp, #40	; 0x28
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10a      	bne.n	8003a6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	623b      	str	r3, [r7, #32]
}
 8003a66:	bf00      	nop
 8003a68:	e7fe      	b.n	8003a68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d02a      	beq.n	8003ac8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b05      	cmp	r3, #5
 8003a82:	dc18      	bgt.n	8003ab6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a84:	f7ff feb2 	bl	80037ec <xTaskGetSchedulerState>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d109      	bne.n	8003aa2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a8e:	4b11      	ldr	r3, [pc, #68]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003a90:	6818      	ldr	r0, [r3, #0]
 8003a92:	f107 0110 	add.w	r1, r7, #16
 8003a96:	2300      	movs	r3, #0
 8003a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a9a:	f7fe fc77 	bl	800238c <xQueueGenericSend>
 8003a9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003aa0:	e012      	b.n	8003ac8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	f107 0110 	add.w	r1, r7, #16
 8003aaa:	2300      	movs	r3, #0
 8003aac:	2200      	movs	r2, #0
 8003aae:	f7fe fc6d 	bl	800238c <xQueueGenericSend>
 8003ab2:	6278      	str	r0, [r7, #36]	; 0x24
 8003ab4:	e008      	b.n	8003ac8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ab6:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <xTimerGenericCommand+0x98>)
 8003ab8:	6818      	ldr	r0, [r3, #0]
 8003aba:	f107 0110 	add.w	r1, r7, #16
 8003abe:	2300      	movs	r3, #0
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	f7fe fd61 	bl	8002588 <xQueueGenericSendFromISR>
 8003ac6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3728      	adds	r7, #40	; 0x28
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20000da0 	.word	0x20000da0

08003ad8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae2:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <prvProcessExpiredTimer+0x94>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fb1d 	bl	8002130 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	18d1      	adds	r1, r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f000 f8d1 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d01f      	beq.n	8003b5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	2300      	movs	r3, #0
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	2100      	movs	r1, #0
 8003b26:	6978      	ldr	r0, [r7, #20]
 8003b28:	f7ff ff88 	bl	8003a3c <xTimerGenericCommand>
 8003b2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d113      	bne.n	8003b5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	60fb      	str	r3, [r7, #12]
}
 8003b46:	bf00      	nop
 8003b48:	e7fe      	b.n	8003b48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	6978      	ldr	r0, [r7, #20]
 8003b62:	4798      	blx	r3
}
 8003b64:	bf00      	nop
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000d98 	.word	0x20000d98

08003b70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 f857 	bl	8003c30 <prvGetNextExpireTime>
 8003b82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4619      	mov	r1, r3
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 f803 	bl	8003b94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b8e:	f000 f8d5 	bl	8003d3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b92:	e7f1      	b.n	8003b78 <prvTimerTask+0x8>

08003b94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b9e:	f7ff fa39 	bl	8003014 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ba2:	f107 0308 	add.w	r3, r7, #8
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 f866 	bl	8003c78 <prvSampleTimeNow>
 8003bac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d130      	bne.n	8003c16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10a      	bne.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d806      	bhi.n	8003bd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003bc2:	f7ff fa35 	bl	8003030 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003bc6:	68f9      	ldr	r1, [r7, #12]
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff85 	bl	8003ad8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003bce:	e024      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d008      	beq.n	8003be8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003bd6:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <prvProcessTimerOrBlockTask+0x90>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <prvProcessTimerOrBlockTask+0x50>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <prvProcessTimerOrBlockTask+0x52>
 8003be4:	2300      	movs	r3, #0
 8003be6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvProcessTimerOrBlockTask+0x94>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	1ad3      	subs	r3, r2, r3
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fe ff7d 	bl	8002af4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003bfa:	f7ff fa19 	bl	8003030 <xTaskResumeAll>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <prvProcessTimerOrBlockTask+0x98>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
}
 8003c14:	e001      	b.n	8003c1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c16:	f7ff fa0b 	bl	8003030 <xTaskResumeAll>
}
 8003c1a:	bf00      	nop
 8003c1c:	3710      	adds	r7, #16
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000d9c 	.word	0x20000d9c
 8003c28:	20000da0 	.word	0x20000da0
 8003c2c:	e000ed04 	.word	0xe000ed04

08003c30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <prvGetNextExpireTime+0x16>
 8003c42:	2201      	movs	r2, #1
 8003c44:	e000      	b.n	8003c48 <prvGetNextExpireTime+0x18>
 8003c46:	2200      	movs	r2, #0
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d105      	bne.n	8003c60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <prvGetNextExpireTime+0x44>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	60fb      	str	r3, [r7, #12]
 8003c5e:	e001      	b.n	8003c64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c64:	68fb      	ldr	r3, [r7, #12]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000d98 	.word	0x20000d98

08003c78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c80:	f7ff fa74 	bl	800316c <xTaskGetTickCount>
 8003c84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c86:	4b0b      	ldr	r3, [pc, #44]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d205      	bcs.n	8003c9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c90:	f000 f936 	bl	8003f00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e002      	b.n	8003ca2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003ca2:	4a04      	ldr	r2, [pc, #16]	; (8003cb4 <prvSampleTimeNow+0x3c>)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	20000da8 	.word	0x20000da8

08003cb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d812      	bhi.n	8003d04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	1ad2      	subs	r2, r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d302      	bcc.n	8003cf2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003cec:	2301      	movs	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	e01b      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <prvInsertTimerInActiveList+0x7c>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	4619      	mov	r1, r3
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fe f9de 	bl	80020be <vListInsert>
 8003d02:	e012      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d206      	bcs.n	8003d1a <prvInsertTimerInActiveList+0x62>
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d14:	2301      	movs	r3, #1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e007      	b.n	8003d2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d1a:	4b07      	ldr	r3, [pc, #28]	; (8003d38 <prvInsertTimerInActiveList+0x80>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe f9ca 	bl	80020be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d2a:	697b      	ldr	r3, [r7, #20]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	20000d9c 	.word	0x20000d9c
 8003d38:	20000d98 	.word	0x20000d98

08003d3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	; 0x38
 8003d40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d42:	e0ca      	b.n	8003eda <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	da18      	bge.n	8003d7c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003d4a:	1d3b      	adds	r3, r7, #4
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	61fb      	str	r3, [r7, #28]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d72:	6850      	ldr	r0, [r2, #4]
 8003d74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f2c0 80ab 	blt.w	8003eda <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	3304      	adds	r3, #4
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe f9cb 	bl	8002130 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d9a:	463b      	mov	r3, r7
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff6b 	bl	8003c78 <prvSampleTimeNow>
 8003da2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b09      	cmp	r3, #9
 8003da8:	f200 8096 	bhi.w	8003ed8 <prvProcessReceivedCommands+0x19c>
 8003dac:	a201      	add	r2, pc, #4	; (adr r2, 8003db4 <prvProcessReceivedCommands+0x78>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003ddd 	.word	0x08003ddd
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003ddd 	.word	0x08003ddd
 8003dc0:	08003e51 	.word	0x08003e51
 8003dc4:	08003e65 	.word	0x08003e65
 8003dc8:	08003eaf 	.word	0x08003eaf
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ddd 	.word	0x08003ddd
 8003dd4:	08003e51 	.word	0x08003e51
 8003dd8:	08003e65 	.word	0x08003e65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	b2da      	uxtb	r2, r3
 8003de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	18d1      	adds	r1, r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfc:	f7ff ff5c 	bl	8003cb8 <prvInsertTimerInActiveList>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d069      	beq.n	8003eda <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d05e      	beq.n	8003eda <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	441a      	add	r2, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e2e:	f7ff fe05 	bl	8003a3c <xTimerGenericCommand>
 8003e32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d14f      	bne.n	8003eda <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	61bb      	str	r3, [r7, #24]
}
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e56:	f023 0301 	bic.w	r3, r3, #1
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003e62:	e03a      	b.n	8003eda <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e6a:	f043 0301 	orr.w	r3, r3, #1
 8003e6e:	b2da      	uxtb	r2, r3
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7e:	699b      	ldr	r3, [r3, #24]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10a      	bne.n	8003e9a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	617b      	str	r3, [r7, #20]
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	18d1      	adds	r1, r2, r3
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea8:	f7ff ff06 	bl	8003cb8 <prvInsertTimerInActiveList>
					break;
 8003eac:	e015      	b.n	8003eda <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d103      	bne.n	8003ec4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ebe:	f000 fbdf 	bl	8004680 <vPortFree>
 8003ec2:	e00a      	b.n	8003eda <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ed6:	e000      	b.n	8003eda <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003ed8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003eda:	4b08      	ldr	r3, [pc, #32]	; (8003efc <prvProcessReceivedCommands+0x1c0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	1d39      	adds	r1, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe fbec 	bl	80026c0 <xQueueReceive>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f47f af2a 	bne.w	8003d44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3730      	adds	r7, #48	; 0x30
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000da0 	.word	0x20000da0

08003f00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f06:	e048      	b.n	8003f9a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f08:	4b2d      	ldr	r3, [pc, #180]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f12:	4b2b      	ldr	r3, [pc, #172]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f905 	bl	8002130 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f34:	f003 0304 	and.w	r3, r3, #4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02e      	beq.n	8003f9a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d90e      	bls.n	8003f6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3304      	adds	r3, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4610      	mov	r0, r2
 8003f66:	f7fe f8aa 	bl	80020be <vListInsert>
 8003f6a:	e016      	b.n	8003f9a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	2300      	movs	r3, #0
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	2100      	movs	r1, #0
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fd60 	bl	8003a3c <xTimerGenericCommand>
 8003f7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	f383 8811 	msr	BASEPRI, r3
 8003f8c:	f3bf 8f6f 	isb	sy
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	603b      	str	r3, [r7, #0]
}
 8003f96:	bf00      	nop
 8003f98:	e7fe      	b.n	8003f98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1b1      	bne.n	8003f08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <prvSwitchTimerLists+0xc4>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003fb0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fb2:	4a04      	ldr	r2, [pc, #16]	; (8003fc4 <prvSwitchTimerLists+0xc4>)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	6013      	str	r3, [r2, #0]
}
 8003fb8:	bf00      	nop
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000d98 	.word	0x20000d98
 8003fc4:	20000d9c 	.word	0x20000d9c

08003fc8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fce:	f000 f969 	bl	80042a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d120      	bne.n	800401c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fda:	4814      	ldr	r0, [pc, #80]	; (800402c <prvCheckForValidListAndQueue+0x64>)
 8003fdc:	f7fe f81e 	bl	800201c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fe0:	4813      	ldr	r0, [pc, #76]	; (8004030 <prvCheckForValidListAndQueue+0x68>)
 8003fe2:	f7fe f81b 	bl	800201c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <prvCheckForValidListAndQueue+0x6c>)
 8003fe8:	4a10      	ldr	r2, [pc, #64]	; (800402c <prvCheckForValidListAndQueue+0x64>)
 8003fea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fec:	4b12      	ldr	r3, [pc, #72]	; (8004038 <prvCheckForValidListAndQueue+0x70>)
 8003fee:	4a10      	ldr	r2, [pc, #64]	; (8004030 <prvCheckForValidListAndQueue+0x68>)
 8003ff0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	9300      	str	r3, [sp, #0]
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <prvCheckForValidListAndQueue+0x74>)
 8003ff8:	4a11      	ldr	r2, [pc, #68]	; (8004040 <prvCheckForValidListAndQueue+0x78>)
 8003ffa:	2110      	movs	r1, #16
 8003ffc:	200a      	movs	r0, #10
 8003ffe:	f7fe f929 	bl	8002254 <xQueueGenericCreateStatic>
 8004002:	4603      	mov	r3, r0
 8004004:	4a08      	ldr	r2, [pc, #32]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 8004006:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004008:	4b07      	ldr	r3, [pc, #28]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <prvCheckForValidListAndQueue+0x60>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	490b      	ldr	r1, [pc, #44]	; (8004044 <prvCheckForValidListAndQueue+0x7c>)
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe fd42 	bl	8002aa0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800401c:	f000 f972 	bl	8004304 <vPortExitCritical>
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	20000da0 	.word	0x20000da0
 800402c:	20000d70 	.word	0x20000d70
 8004030:	20000d84 	.word	0x20000d84
 8004034:	20000d98 	.word	0x20000d98
 8004038:	20000d9c 	.word	0x20000d9c
 800403c:	20000e4c 	.word	0x20000e4c
 8004040:	20000dac 	.word	0x20000dac
 8004044:	08004ac8 	.word	0x08004ac8

08004048 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3b04      	subs	r3, #4
 8004058:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004060:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b04      	subs	r3, #4
 8004066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f023 0201 	bic.w	r2, r3, #1
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b04      	subs	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004078:	4a0c      	ldr	r2, [pc, #48]	; (80040ac <pxPortInitialiseStack+0x64>)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3b14      	subs	r3, #20
 8004082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3b04      	subs	r3, #4
 800408e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f06f 0202 	mvn.w	r2, #2
 8004096:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	3b20      	subs	r3, #32
 800409c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800409e:	68fb      	ldr	r3, [r7, #12]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	080040b1 	.word	0x080040b1

080040b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b085      	sub	sp, #20
 80040b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040ba:	4b12      	ldr	r3, [pc, #72]	; (8004104 <prvTaskExitError+0x54>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c2:	d00a      	beq.n	80040da <prvTaskExitError+0x2a>
	__asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
}
 80040d6:	bf00      	nop
 80040d8:	e7fe      	b.n	80040d8 <prvTaskExitError+0x28>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	60bb      	str	r3, [r7, #8]
}
 80040ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040ee:	bf00      	nop
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0fc      	beq.n	80040f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	2000000c 	.word	0x2000000c
	...

08004110 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004110:	4b07      	ldr	r3, [pc, #28]	; (8004130 <pxCurrentTCBConst2>)
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	6808      	ldr	r0, [r1, #0]
 8004116:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	f380 8809 	msr	PSP, r0
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8811 	msr	BASEPRI, r0
 800412a:	4770      	bx	lr
 800412c:	f3af 8000 	nop.w

08004130 <pxCurrentTCBConst2>:
 8004130:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004134:	bf00      	nop
 8004136:	bf00      	nop

08004138 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004138:	4808      	ldr	r0, [pc, #32]	; (800415c <prvPortStartFirstTask+0x24>)
 800413a:	6800      	ldr	r0, [r0, #0]
 800413c:	6800      	ldr	r0, [r0, #0]
 800413e:	f380 8808 	msr	MSP, r0
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	f380 8814 	msr	CONTROL, r0
 800414a:	b662      	cpsie	i
 800414c:	b661      	cpsie	f
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	f3bf 8f6f 	isb	sy
 8004156:	df00      	svc	0
 8004158:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800415a:	bf00      	nop
 800415c:	e000ed08 	.word	0xe000ed08

08004160 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004166:	4b46      	ldr	r3, [pc, #280]	; (8004280 <xPortStartScheduler+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a46      	ldr	r2, [pc, #280]	; (8004284 <xPortStartScheduler+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10a      	bne.n	8004186 <xPortStartScheduler+0x26>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004186:	4b3e      	ldr	r3, [pc, #248]	; (8004280 <xPortStartScheduler+0x120>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <xPortStartScheduler+0x128>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d10a      	bne.n	80041a6 <xPortStartScheduler+0x46>
	__asm volatile
 8004190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004194:	f383 8811 	msr	BASEPRI, r3
 8004198:	f3bf 8f6f 	isb	sy
 800419c:	f3bf 8f4f 	dsb	sy
 80041a0:	60fb      	str	r3, [r7, #12]
}
 80041a2:	bf00      	nop
 80041a4:	e7fe      	b.n	80041a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041a6:	4b39      	ldr	r3, [pc, #228]	; (800428c <xPortStartScheduler+0x12c>)
 80041a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	4b31      	ldr	r3, [pc, #196]	; (8004290 <xPortStartScheduler+0x130>)
 80041cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80041ce:	4b31      	ldr	r3, [pc, #196]	; (8004294 <xPortStartScheduler+0x134>)
 80041d0:	2207      	movs	r2, #7
 80041d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041d4:	e009      	b.n	80041ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	; (8004294 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <xPortStartScheduler+0x134>)
 80041de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80041ea:	78fb      	ldrb	r3, [r7, #3]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b80      	cmp	r3, #128	; 0x80
 80041f4:	d0ef      	beq.n	80041d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <xPortStartScheduler+0x134>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f1c3 0307 	rsb	r3, r3, #7
 80041fe:	2b04      	cmp	r3, #4
 8004200:	d00a      	beq.n	8004218 <xPortStartScheduler+0xb8>
	__asm volatile
 8004202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004206:	f383 8811 	msr	BASEPRI, r3
 800420a:	f3bf 8f6f 	isb	sy
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	60bb      	str	r3, [r7, #8]
}
 8004214:	bf00      	nop
 8004216:	e7fe      	b.n	8004216 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004218:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <xPortStartScheduler+0x134>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <xPortStartScheduler+0x134>)
 8004220:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004222:	4b1c      	ldr	r3, [pc, #112]	; (8004294 <xPortStartScheduler+0x134>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <xPortStartScheduler+0x134>)
 800422c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	b2da      	uxtb	r2, r3
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004236:	4b18      	ldr	r3, [pc, #96]	; (8004298 <xPortStartScheduler+0x138>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a17      	ldr	r2, [pc, #92]	; (8004298 <xPortStartScheduler+0x138>)
 800423c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004242:	4b15      	ldr	r3, [pc, #84]	; (8004298 <xPortStartScheduler+0x138>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a14      	ldr	r2, [pc, #80]	; (8004298 <xPortStartScheduler+0x138>)
 8004248:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800424c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800424e:	f000 f8dd 	bl	800440c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004252:	4b12      	ldr	r3, [pc, #72]	; (800429c <xPortStartScheduler+0x13c>)
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004258:	f000 f8fc 	bl	8004454 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800425c:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <xPortStartScheduler+0x140>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a0f      	ldr	r2, [pc, #60]	; (80042a0 <xPortStartScheduler+0x140>)
 8004262:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004266:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004268:	f7ff ff66 	bl	8004138 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800426c:	f7ff f848 	bl	8003300 <vTaskSwitchContext>
	prvTaskExitError();
 8004270:	f7ff ff1e 	bl	80040b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	e000ed00 	.word	0xe000ed00
 8004284:	410fc271 	.word	0x410fc271
 8004288:	410fc270 	.word	0x410fc270
 800428c:	e000e400 	.word	0xe000e400
 8004290:	20000e9c 	.word	0x20000e9c
 8004294:	20000ea0 	.word	0x20000ea0
 8004298:	e000ed20 	.word	0xe000ed20
 800429c:	2000000c 	.word	0x2000000c
 80042a0:	e000ef34 	.word	0xe000ef34

080042a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	607b      	str	r3, [r7, #4]
}
 80042bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80042be:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <vPortEnterCritical+0x58>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	4a0d      	ldr	r2, [pc, #52]	; (80042fc <vPortEnterCritical+0x58>)
 80042c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <vPortEnterCritical+0x58>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d10f      	bne.n	80042f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <vPortEnterCritical+0x5c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	603b      	str	r3, [r7, #0]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <vPortEnterCritical+0x4a>
	}
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	2000000c 	.word	0x2000000c
 8004300:	e000ed04 	.word	0xe000ed04

08004304 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800430a:	4b12      	ldr	r3, [pc, #72]	; (8004354 <vPortExitCritical+0x50>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <vPortExitCritical+0x24>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	607b      	str	r3, [r7, #4]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004328:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <vPortExitCritical+0x50>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	4a09      	ldr	r2, [pc, #36]	; (8004354 <vPortExitCritical+0x50>)
 8004330:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <vPortExitCritical+0x50>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <vPortExitCritical+0x42>
 800433a:	2300      	movs	r3, #0
 800433c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	f383 8811 	msr	BASEPRI, r3
}
 8004344:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c
	...

08004360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004360:	f3ef 8009 	mrs	r0, PSP
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <pxCurrentTCBConst>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f01e 0f10 	tst.w	lr, #16
 8004370:	bf08      	it	eq
 8004372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437a:	6010      	str	r0, [r2, #0]
 800437c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004384:	f380 8811 	msr	BASEPRI, r0
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f7fe ffb6 	bl	8003300 <vTaskSwitchContext>
 8004394:	f04f 0000 	mov.w	r0, #0
 8004398:	f380 8811 	msr	BASEPRI, r0
 800439c:	bc09      	pop	{r0, r3}
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	6808      	ldr	r0, [r1, #0]
 80043a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a6:	f01e 0f10 	tst.w	lr, #16
 80043aa:	bf08      	it	eq
 80043ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80043b0:	f380 8809 	msr	PSP, r0
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	f3af 8000 	nop.w

080043c0 <pxCurrentTCBConst>:
 80043c0:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80043c4:	bf00      	nop
 80043c6:	bf00      	nop

080043c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	607b      	str	r3, [r7, #4]
}
 80043e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80043e2:	f7fe fed3 	bl	800318c <xTaskIncrementTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <xPortSysTickHandler+0x40>)
 80043ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	2300      	movs	r3, #0
 80043f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f383 8811 	msr	BASEPRI, r3
}
 80043fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <vPortSetupTimerInterrupt+0x34>)
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <vPortSetupTimerInterrupt+0x38>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800441c:	4b0a      	ldr	r3, [pc, #40]	; (8004448 <vPortSetupTimerInterrupt+0x3c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <vPortSetupTimerInterrupt+0x40>)
 8004422:	fba2 2303 	umull	r2, r3, r2, r3
 8004426:	099b      	lsrs	r3, r3, #6
 8004428:	4a09      	ldr	r2, [pc, #36]	; (8004450 <vPortSetupTimerInterrupt+0x44>)
 800442a:	3b01      	subs	r3, #1
 800442c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800442e:	4b04      	ldr	r3, [pc, #16]	; (8004440 <vPortSetupTimerInterrupt+0x34>)
 8004430:	2207      	movs	r2, #7
 8004432:	601a      	str	r2, [r3, #0]
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000e010 	.word	0xe000e010
 8004444:	e000e018 	.word	0xe000e018
 8004448:	20000000 	.word	0x20000000
 800444c:	10624dd3 	.word	0x10624dd3
 8004450:	e000e014 	.word	0xe000e014

08004454 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004454:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004464 <vPortEnableVFP+0x10>
 8004458:	6801      	ldr	r1, [r0, #0]
 800445a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800445e:	6001      	str	r1, [r0, #0]
 8004460:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004462:	bf00      	nop
 8004464:	e000ed88 	.word	0xe000ed88

08004468 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800446e:	f3ef 8305 	mrs	r3, IPSR
 8004472:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d914      	bls.n	80044a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800447a:	4a17      	ldr	r2, [pc, #92]	; (80044d8 <vPortValidateInterruptPriority+0x70>)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4413      	add	r3, r2
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <vPortValidateInterruptPriority+0x74>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	7afa      	ldrb	r2, [r7, #11]
 800448a:	429a      	cmp	r2, r3
 800448c:	d20a      	bcs.n	80044a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
 80044a2:	e7fe      	b.n	80044a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80044a4:	4b0e      	ldr	r3, [pc, #56]	; (80044e0 <vPortValidateInterruptPriority+0x78>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044ac:	4b0d      	ldr	r3, [pc, #52]	; (80044e4 <vPortValidateInterruptPriority+0x7c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d90a      	bls.n	80044ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	603b      	str	r3, [r7, #0]
}
 80044c6:	bf00      	nop
 80044c8:	e7fe      	b.n	80044c8 <vPortValidateInterruptPriority+0x60>
	}
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	e000e3f0 	.word	0xe000e3f0
 80044dc:	20000e9c 	.word	0x20000e9c
 80044e0:	e000ed0c 	.word	0xe000ed0c
 80044e4:	20000ea0 	.word	0x20000ea0

080044e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08a      	sub	sp, #40	; 0x28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80044f4:	f7fe fd8e 	bl	8003014 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80044f8:	4b5b      	ldr	r3, [pc, #364]	; (8004668 <pvPortMalloc+0x180>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004500:	f000 f920 	bl	8004744 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004504:	4b59      	ldr	r3, [pc, #356]	; (800466c <pvPortMalloc+0x184>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4013      	ands	r3, r2
 800450c:	2b00      	cmp	r3, #0
 800450e:	f040 8093 	bne.w	8004638 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d01d      	beq.n	8004554 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004518:	2208      	movs	r2, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b00      	cmp	r3, #0
 8004528:	d014      	beq.n	8004554 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f023 0307 	bic.w	r3, r3, #7
 8004530:	3308      	adds	r3, #8
 8004532:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <pvPortMalloc+0x6c>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	617b      	str	r3, [r7, #20]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d06e      	beq.n	8004638 <pvPortMalloc+0x150>
 800455a:	4b45      	ldr	r3, [pc, #276]	; (8004670 <pvPortMalloc+0x188>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d869      	bhi.n	8004638 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004564:	4b43      	ldr	r3, [pc, #268]	; (8004674 <pvPortMalloc+0x18c>)
 8004566:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004568:	4b42      	ldr	r3, [pc, #264]	; (8004674 <pvPortMalloc+0x18c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800456e:	e004      	b.n	800457a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	429a      	cmp	r2, r3
 8004582:	d903      	bls.n	800458c <pvPortMalloc+0xa4>
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1f1      	bne.n	8004570 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800458c:	4b36      	ldr	r3, [pc, #216]	; (8004668 <pvPortMalloc+0x180>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004592:	429a      	cmp	r2, r3
 8004594:	d050      	beq.n	8004638 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2208      	movs	r2, #8
 800459c:	4413      	add	r3, r2
 800459e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80045a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad2      	subs	r2, r2, r3
 80045b0:	2308      	movs	r3, #8
 80045b2:	005b      	lsls	r3, r3, #1
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d91f      	bls.n	80045f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80045b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4413      	add	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f003 0307 	and.w	r3, r3, #7
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <pvPortMalloc+0xf8>
	__asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	613b      	str	r3, [r7, #16]
}
 80045dc:	bf00      	nop
 80045de:	e7fe      	b.n	80045de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80045f2:	69b8      	ldr	r0, [r7, #24]
 80045f4:	f000 f908 	bl	8004808 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80045f8:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <pvPortMalloc+0x188>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	4a1b      	ldr	r2, [pc, #108]	; (8004670 <pvPortMalloc+0x188>)
 8004604:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004606:	4b1a      	ldr	r3, [pc, #104]	; (8004670 <pvPortMalloc+0x188>)
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	4b1b      	ldr	r3, [pc, #108]	; (8004678 <pvPortMalloc+0x190>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d203      	bcs.n	800461a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004612:	4b17      	ldr	r3, [pc, #92]	; (8004670 <pvPortMalloc+0x188>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a18      	ldr	r2, [pc, #96]	; (8004678 <pvPortMalloc+0x190>)
 8004618:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	4b13      	ldr	r3, [pc, #76]	; (800466c <pvPortMalloc+0x184>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	431a      	orrs	r2, r3
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	2200      	movs	r2, #0
 800462c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800462e:	4b13      	ldr	r3, [pc, #76]	; (800467c <pvPortMalloc+0x194>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	3301      	adds	r3, #1
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <pvPortMalloc+0x194>)
 8004636:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004638:	f7fe fcfa 	bl	8003030 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <pvPortMalloc+0x174>
	__asm volatile
 8004646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	60fb      	str	r3, [r7, #12]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <pvPortMalloc+0x172>
	return pvReturn;
 800465c:	69fb      	ldr	r3, [r7, #28]
}
 800465e:	4618      	mov	r0, r3
 8004660:	3728      	adds	r7, #40	; 0x28
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	20004aac 	.word	0x20004aac
 800466c:	20004ac0 	.word	0x20004ac0
 8004670:	20004ab0 	.word	0x20004ab0
 8004674:	20004aa4 	.word	0x20004aa4
 8004678:	20004ab4 	.word	0x20004ab4
 800467c:	20004ab8 	.word	0x20004ab8

08004680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b086      	sub	sp, #24
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d04d      	beq.n	800472e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004692:	2308      	movs	r3, #8
 8004694:	425b      	negs	r3, r3
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	4413      	add	r3, r2
 800469a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	685a      	ldr	r2, [r3, #4]
 80046a4:	4b24      	ldr	r3, [pc, #144]	; (8004738 <vPortFree+0xb8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <vPortFree+0x44>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60fb      	str	r3, [r7, #12]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <vPortFree+0x62>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	60bb      	str	r3, [r7, #8]
}
 80046de:	bf00      	nop
 80046e0:	e7fe      	b.n	80046e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <vPortFree+0xb8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4013      	ands	r3, r2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01e      	beq.n	800472e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d11a      	bne.n	800472e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <vPortFree+0xb8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	43db      	mvns	r3, r3
 8004702:	401a      	ands	r2, r3
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004708:	f7fe fc84 	bl	8003014 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	685a      	ldr	r2, [r3, #4]
 8004710:	4b0a      	ldr	r3, [pc, #40]	; (800473c <vPortFree+0xbc>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4413      	add	r3, r2
 8004716:	4a09      	ldr	r2, [pc, #36]	; (800473c <vPortFree+0xbc>)
 8004718:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f000 f874 	bl	8004808 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004720:	4b07      	ldr	r3, [pc, #28]	; (8004740 <vPortFree+0xc0>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4a06      	ldr	r2, [pc, #24]	; (8004740 <vPortFree+0xc0>)
 8004728:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800472a:	f7fe fc81 	bl	8003030 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20004ac0 	.word	0x20004ac0
 800473c:	20004ab0 	.word	0x20004ab0
 8004740:	20004abc 	.word	0x20004abc

08004744 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800474a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800474e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004750:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <prvHeapInit+0xac>)
 8004752:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00c      	beq.n	8004778 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	3307      	adds	r3, #7
 8004762:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0307 	bic.w	r3, r3, #7
 800476a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <prvHeapInit+0xac>)
 8004774:	4413      	add	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800477c:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <prvHeapInit+0xb0>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <prvHeapInit+0xb0>)
 8004784:	2200      	movs	r2, #0
 8004786:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4413      	add	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004790:	2208      	movs	r2, #8
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1a9b      	subs	r3, r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <prvHeapInit+0xb4>)
 80047a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80047a6:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <prvHeapInit+0xb4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <prvHeapInit+0xb4>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	1ad2      	subs	r2, r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047c4:	4b0c      	ldr	r3, [pc, #48]	; (80047f8 <prvHeapInit+0xb4>)
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <prvHeapInit+0xb8>)
 80047d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4a09      	ldr	r2, [pc, #36]	; (8004800 <prvHeapInit+0xbc>)
 80047da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <prvHeapInit+0xc0>)
 80047de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80047e2:	601a      	str	r2, [r3, #0]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	20000ea4 	.word	0x20000ea4
 80047f4:	20004aa4 	.word	0x20004aa4
 80047f8:	20004aac 	.word	0x20004aac
 80047fc:	20004ab4 	.word	0x20004ab4
 8004800:	20004ab0 	.word	0x20004ab0
 8004804:	20004ac0 	.word	0x20004ac0

08004808 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004810:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <prvInsertBlockIntoFreeList+0xac>)
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e002      	b.n	800481c <prvInsertBlockIntoFreeList+0x14>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	429a      	cmp	r2, r3
 8004824:	d8f7      	bhi.n	8004816 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d108      	bne.n	800484a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	441a      	add	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	441a      	add	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	429a      	cmp	r2, r3
 800485c:	d118      	bne.n	8004890 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	429a      	cmp	r2, r3
 8004868:	d00d      	beq.n	8004886 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	441a      	add	r2, r3
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e008      	b.n	8004898 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	601a      	str	r2, [r3, #0]
 800488e:	e003      	b.n	8004898 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	429a      	cmp	r2, r3
 800489e:	d002      	beq.n	80048a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048a6:	bf00      	nop
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	20004aa4 	.word	0x20004aa4
 80048b8:	20004aac 	.word	0x20004aac

080048bc <__malloc_lock>:
 80048bc:	4801      	ldr	r0, [pc, #4]	; (80048c4 <__malloc_lock+0x8>)
 80048be:	f7fc b868 	b.w	8000992 <__retarget_lock_acquire_recursive>
 80048c2:	bf00      	nop
 80048c4:	200000cc 	.word	0x200000cc

080048c8 <__malloc_unlock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	; (80048d0 <__malloc_unlock+0x8>)
 80048ca:	f7fc b876 	b.w	80009ba <__retarget_lock_release_recursive>
 80048ce:	bf00      	nop
 80048d0:	200000cc 	.word	0x200000cc

080048d4 <memset>:
 80048d4:	4402      	add	r2, r0
 80048d6:	4603      	mov	r3, r0
 80048d8:	4293      	cmp	r3, r2
 80048da:	d100      	bne.n	80048de <memset+0xa>
 80048dc:	4770      	bx	lr
 80048de:	f803 1b01 	strb.w	r1, [r3], #1
 80048e2:	e7f9      	b.n	80048d8 <memset+0x4>

080048e4 <_reclaim_reent>:
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <_reclaim_reent+0xa8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4283      	cmp	r3, r0
 80048ea:	b570      	push	{r4, r5, r6, lr}
 80048ec:	4604      	mov	r4, r0
 80048ee:	d04b      	beq.n	8004988 <_reclaim_reent+0xa4>
 80048f0:	69c3      	ldr	r3, [r0, #28]
 80048f2:	b143      	cbz	r3, 8004906 <_reclaim_reent+0x22>
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d144      	bne.n	8004984 <_reclaim_reent+0xa0>
 80048fa:	69e3      	ldr	r3, [r4, #28]
 80048fc:	6819      	ldr	r1, [r3, #0]
 80048fe:	b111      	cbz	r1, 8004906 <_reclaim_reent+0x22>
 8004900:	4620      	mov	r0, r4
 8004902:	f000 f877 	bl	80049f4 <_free_r>
 8004906:	6961      	ldr	r1, [r4, #20]
 8004908:	b111      	cbz	r1, 8004910 <_reclaim_reent+0x2c>
 800490a:	4620      	mov	r0, r4
 800490c:	f000 f872 	bl	80049f4 <_free_r>
 8004910:	69e1      	ldr	r1, [r4, #28]
 8004912:	b111      	cbz	r1, 800491a <_reclaim_reent+0x36>
 8004914:	4620      	mov	r0, r4
 8004916:	f000 f86d 	bl	80049f4 <_free_r>
 800491a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800491c:	b111      	cbz	r1, 8004924 <_reclaim_reent+0x40>
 800491e:	4620      	mov	r0, r4
 8004920:	f000 f868 	bl	80049f4 <_free_r>
 8004924:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004926:	b111      	cbz	r1, 800492e <_reclaim_reent+0x4a>
 8004928:	4620      	mov	r0, r4
 800492a:	f000 f863 	bl	80049f4 <_free_r>
 800492e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004930:	b111      	cbz	r1, 8004938 <_reclaim_reent+0x54>
 8004932:	4620      	mov	r0, r4
 8004934:	f000 f85e 	bl	80049f4 <_free_r>
 8004938:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800493a:	b111      	cbz	r1, 8004942 <_reclaim_reent+0x5e>
 800493c:	4620      	mov	r0, r4
 800493e:	f000 f859 	bl	80049f4 <_free_r>
 8004942:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004944:	b111      	cbz	r1, 800494c <_reclaim_reent+0x68>
 8004946:	4620      	mov	r0, r4
 8004948:	f000 f854 	bl	80049f4 <_free_r>
 800494c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800494e:	b111      	cbz	r1, 8004956 <_reclaim_reent+0x72>
 8004950:	4620      	mov	r0, r4
 8004952:	f000 f84f 	bl	80049f4 <_free_r>
 8004956:	6a23      	ldr	r3, [r4, #32]
 8004958:	b1b3      	cbz	r3, 8004988 <_reclaim_reent+0xa4>
 800495a:	4620      	mov	r0, r4
 800495c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004960:	4718      	bx	r3
 8004962:	5949      	ldr	r1, [r1, r5]
 8004964:	b941      	cbnz	r1, 8004978 <_reclaim_reent+0x94>
 8004966:	3504      	adds	r5, #4
 8004968:	69e3      	ldr	r3, [r4, #28]
 800496a:	2d80      	cmp	r5, #128	; 0x80
 800496c:	68d9      	ldr	r1, [r3, #12]
 800496e:	d1f8      	bne.n	8004962 <_reclaim_reent+0x7e>
 8004970:	4620      	mov	r0, r4
 8004972:	f000 f83f 	bl	80049f4 <_free_r>
 8004976:	e7c0      	b.n	80048fa <_reclaim_reent+0x16>
 8004978:	680e      	ldr	r6, [r1, #0]
 800497a:	4620      	mov	r0, r4
 800497c:	f000 f83a 	bl	80049f4 <_free_r>
 8004980:	4631      	mov	r1, r6
 8004982:	e7ef      	b.n	8004964 <_reclaim_reent+0x80>
 8004984:	2500      	movs	r5, #0
 8004986:	e7ef      	b.n	8004968 <_reclaim_reent+0x84>
 8004988:	bd70      	pop	{r4, r5, r6, pc}
 800498a:	bf00      	nop
 800498c:	2000005c 	.word	0x2000005c

08004990 <__libc_init_array>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	4d0d      	ldr	r5, [pc, #52]	; (80049c8 <__libc_init_array+0x38>)
 8004994:	4c0d      	ldr	r4, [pc, #52]	; (80049cc <__libc_init_array+0x3c>)
 8004996:	1b64      	subs	r4, r4, r5
 8004998:	10a4      	asrs	r4, r4, #2
 800499a:	2600      	movs	r6, #0
 800499c:	42a6      	cmp	r6, r4
 800499e:	d109      	bne.n	80049b4 <__libc_init_array+0x24>
 80049a0:	4d0b      	ldr	r5, [pc, #44]	; (80049d0 <__libc_init_array+0x40>)
 80049a2:	4c0c      	ldr	r4, [pc, #48]	; (80049d4 <__libc_init_array+0x44>)
 80049a4:	f000 f872 	bl	8004a8c <_init>
 80049a8:	1b64      	subs	r4, r4, r5
 80049aa:	10a4      	asrs	r4, r4, #2
 80049ac:	2600      	movs	r6, #0
 80049ae:	42a6      	cmp	r6, r4
 80049b0:	d105      	bne.n	80049be <__libc_init_array+0x2e>
 80049b2:	bd70      	pop	{r4, r5, r6, pc}
 80049b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049b8:	4798      	blx	r3
 80049ba:	3601      	adds	r6, #1
 80049bc:	e7ee      	b.n	800499c <__libc_init_array+0xc>
 80049be:	f855 3b04 	ldr.w	r3, [r5], #4
 80049c2:	4798      	blx	r3
 80049c4:	3601      	adds	r6, #1
 80049c6:	e7f2      	b.n	80049ae <__libc_init_array+0x1e>
 80049c8:	08004b38 	.word	0x08004b38
 80049cc:	08004b38 	.word	0x08004b38
 80049d0:	08004b38 	.word	0x08004b38
 80049d4:	08004b3c 	.word	0x08004b3c

080049d8 <memcpy>:
 80049d8:	440a      	add	r2, r1
 80049da:	4291      	cmp	r1, r2
 80049dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80049e0:	d100      	bne.n	80049e4 <memcpy+0xc>
 80049e2:	4770      	bx	lr
 80049e4:	b510      	push	{r4, lr}
 80049e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ee:	4291      	cmp	r1, r2
 80049f0:	d1f9      	bne.n	80049e6 <memcpy+0xe>
 80049f2:	bd10      	pop	{r4, pc}

080049f4 <_free_r>:
 80049f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049f6:	2900      	cmp	r1, #0
 80049f8:	d044      	beq.n	8004a84 <_free_r+0x90>
 80049fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fe:	9001      	str	r0, [sp, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	f1a1 0404 	sub.w	r4, r1, #4
 8004a06:	bfb8      	it	lt
 8004a08:	18e4      	addlt	r4, r4, r3
 8004a0a:	f7ff ff57 	bl	80048bc <__malloc_lock>
 8004a0e:	4a1e      	ldr	r2, [pc, #120]	; (8004a88 <_free_r+0x94>)
 8004a10:	9801      	ldr	r0, [sp, #4]
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	b933      	cbnz	r3, 8004a24 <_free_r+0x30>
 8004a16:	6063      	str	r3, [r4, #4]
 8004a18:	6014      	str	r4, [r2, #0]
 8004a1a:	b003      	add	sp, #12
 8004a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a20:	f7ff bf52 	b.w	80048c8 <__malloc_unlock>
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	d908      	bls.n	8004a3a <_free_r+0x46>
 8004a28:	6825      	ldr	r5, [r4, #0]
 8004a2a:	1961      	adds	r1, r4, r5
 8004a2c:	428b      	cmp	r3, r1
 8004a2e:	bf01      	itttt	eq
 8004a30:	6819      	ldreq	r1, [r3, #0]
 8004a32:	685b      	ldreq	r3, [r3, #4]
 8004a34:	1949      	addeq	r1, r1, r5
 8004a36:	6021      	streq	r1, [r4, #0]
 8004a38:	e7ed      	b.n	8004a16 <_free_r+0x22>
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b10b      	cbz	r3, 8004a44 <_free_r+0x50>
 8004a40:	42a3      	cmp	r3, r4
 8004a42:	d9fa      	bls.n	8004a3a <_free_r+0x46>
 8004a44:	6811      	ldr	r1, [r2, #0]
 8004a46:	1855      	adds	r5, r2, r1
 8004a48:	42a5      	cmp	r5, r4
 8004a4a:	d10b      	bne.n	8004a64 <_free_r+0x70>
 8004a4c:	6824      	ldr	r4, [r4, #0]
 8004a4e:	4421      	add	r1, r4
 8004a50:	1854      	adds	r4, r2, r1
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	6011      	str	r1, [r2, #0]
 8004a56:	d1e0      	bne.n	8004a1a <_free_r+0x26>
 8004a58:	681c      	ldr	r4, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	6053      	str	r3, [r2, #4]
 8004a5e:	440c      	add	r4, r1
 8004a60:	6014      	str	r4, [r2, #0]
 8004a62:	e7da      	b.n	8004a1a <_free_r+0x26>
 8004a64:	d902      	bls.n	8004a6c <_free_r+0x78>
 8004a66:	230c      	movs	r3, #12
 8004a68:	6003      	str	r3, [r0, #0]
 8004a6a:	e7d6      	b.n	8004a1a <_free_r+0x26>
 8004a6c:	6825      	ldr	r5, [r4, #0]
 8004a6e:	1961      	adds	r1, r4, r5
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf04      	itt	eq
 8004a74:	6819      	ldreq	r1, [r3, #0]
 8004a76:	685b      	ldreq	r3, [r3, #4]
 8004a78:	6063      	str	r3, [r4, #4]
 8004a7a:	bf04      	itt	eq
 8004a7c:	1949      	addeq	r1, r1, r5
 8004a7e:	6021      	streq	r1, [r4, #0]
 8004a80:	6054      	str	r4, [r2, #4]
 8004a82:	e7ca      	b.n	8004a1a <_free_r+0x26>
 8004a84:	b003      	add	sp, #12
 8004a86:	bd30      	pop	{r4, r5, pc}
 8004a88:	20004ac4 	.word	0x20004ac4

08004a8c <_init>:
 8004a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8e:	bf00      	nop
 8004a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a92:	bc08      	pop	{r3}
 8004a94:	469e      	mov	lr, r3
 8004a96:	4770      	bx	lr

08004a98 <_fini>:
 8004a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9a:	bf00      	nop
 8004a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a9e:	bc08      	pop	{r3}
 8004aa0:	469e      	mov	lr, r3
 8004aa2:	4770      	bx	lr
